{"version":3,"sources":["components/Profil/MyPosts/MyPosts.module.css","components/Profil/MyPosts/Post/Post.module.css","components/Nav/Nav.module.css","components/Sidebar/SidebarData/SidebarData.tsx","components/Sidebar/Sidebar.tsx","components/Sidebar/SidebarContainer.tsx","components/Nav/Nav.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","Redux/dialogReducer.ts","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthComponent.tsx","components/Dialogs/DialogsContainer.tsx","components/Sidebar/Friends.tsx","components/Users/Users.tsx","images/loader.gif","common/Preloader.tsx","api/api.ts","Redux/usersReducer.ts","components/Users/UsersContainer.tsx","components/Profil/ProfilInfo/ProfileStatus.tsx","components/Profil/ProfilInfo/ProfilInfo.tsx","Redux/profilReducer.ts","components/Profil/MyPosts/Post/Post.tsx","components/Profil/MyPosts/MyPosts.tsx","components/Profil/MyPosts/MyPostsContainer.tsx","components/Profil/Profil.tsx","components/Profil/ProfilContainer.tsx","components/Header/Header.tsx","Redux/authReducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","reportWebVitals.ts","Redux/sidebarReducer.ts","Redux/redux-store.ts","index.tsx","components/Dialogs/Dialogs.module.css","components/Sidebar/Sidebar.module.css","components/Header/Header.module.css","components/Users/Users.module.css","components/Profil/ProfilInfo/ProfilInfo.module.css"],"names":["module","exports","SidebarData","props","className","s","friend","img","src","name","Sidebar","FriendsElement","sidebar","friends","map","p","id","SidebarContainer","connect","state","Nav","nav","item","to","activeClassName","active","News","Music","Settings","UPDATE_NEW_MASSAGE_BODY","ADD_MASSAGE","initialState","dialogs","messages","message","newMassageBody","dialogReducer","action","type","body","DialogItem","dialog","Message","Dialogs","DialogElements","dialogPage","d","MessegesElements","m","dialogItems","onChange","e","currentTarget","value","updateNewMassageBody","onClick","addMassage","mapStateToPropsForRedirect","isAuth","auth","withAuthComponent","Component","restProps","DialogsContainer","compose","dispatch","Friends","Users","pageCount","Math","ceil","totalUsersCount","pageSize","pages","i","push","useState","slice","currentPages","setCurrentPages","onChangeNumber","currentPage","selectedPage","users","u","photos","small","followed","disabled","followingInProgress","some","unfollow","follow","status","Preloader","preloader","instance","axios","create","baseURL","withCredentials","headers","usersApi","get","then","response","data","post","delete","userId","console","log","profileApi","getProfile","getStatus","updateStatus","put","authApi","FOLLOW_SUCCESS","UNFOLLOW_SUCCESS","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","isFetching","setCurrentPage","toggleIsFetching","toggleFollowingInProgress","usersReducer","userID","newUsers","count","filter","UsersContainer","pageNumber","getUsers","this","React","usersPage","resultCode","items","totalCount","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","onChangeStatus","prevProps","prevState","snapshot","onDoubleClick","autoFocus","onBlur","ProfilInfo","profil","upimage","descriptionBlock","large","aboutMe","lookingForAJob","ADD_POST","UPDATE_NEW_POST","SET_USER_PROFIL","SET_USER_STATUS","posts","likecount","newPostText","setUserStatus","profilReducer","text","Post","itemm","MyPosts","PostsElements","profilPage","mypost","updateNewPostText","addPost","MyPostsContainer","updateNewPostTextActionCreator","Profil","content","ProfilContainer","match","params","getUserProfil","getUserStatus","withRouter","Header","header","alt","loginBlock","login","SET_AUTH_USER_DATA","email","authReducer","HeaderContainer","getAuthUserData","setAuthUserData","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Login","dataForm","App","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","rootReducer","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleWare","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById","getState","subscribe"],"mappings":"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","file":"static/js/main.405b0a28.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mypost\":\"MyPosts_mypost__p1637\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemm\":\"Post_itemm__3sWzg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3gICw\",\"item\":\"Nav_item__96rLj\",\"active\":\"Nav_active__XSt-p\"};","import s from \"../Sidebar.module.css\";\nimport React from \"react\"\nimport {FriendType} from \"../../../Redux/sidebarReducer\";\n\nconst SidebarData = (props: FriendType) => {\nreturn (\n<div className={s.friend}>\n    <img className={s.img} src={props.img}/>\n    <div>{props.name}</div>\n</div>\n)}\n\nexport default SidebarData","import React from \"react\";\nimport s from \"./Sidebar.module.css\";\nimport {SidebarPropsType} from \"./SidebarContainer\";\nimport SidebarData from \"./SidebarData/SidebarData\";\n\n\n\n\nexport const Sidebar = (props: SidebarPropsType) => {\n\n    let FriendsElement = props.sidebar.friends.map((p: {id: number, name: string, img: string}) => <SidebarData key={p.id} id={p.id} name={p.name} img={p.img} />)\n\n    return (\n        <div className={s.sidebar}>\n            {FriendsElement}\n        </div>\n    )\n}\n\nexport default Sidebar\n\n","import {AllAppStateType} from \"../../Redux/redux-store\";\n// import {Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\nimport Sidebar from \"./Sidebar\";\n\nexport type SidebarPropsType = MapStatePropsType\n\ntype FriendType = {\n    name: string\n    id: number\n    img: string\n}\ntype SidebarType = {\n    friends: Array<FriendType>\n}\ntype MapStatePropsType = {\n    sidebar: SidebarType\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        sidebar: state.sidebar\n    }\n}\nconst SidebarContainer = connect(mapStateToProps)(Sidebar)\n\nexport default SidebarContainer;\n\n// type MapDispathPropsType = {\n//     addMassage: () => void\n//     updateNewMassageBody: (body: string) => void\n// }\n//\n// const mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType=> {\n//     return {\n//         addMassage: () => {\n//             dispatch(addMassageActionCreator())\n//         },\n//         updateNewMassageBody: (body: string) => {\n//             dispatch(updateNewMassageBodyActionCreator(body))\n//         }\n//     }\n// }","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Nav.module.css';\nimport SidebarContainer from \"../Sidebar/SidebarContainer\";\n\nconst Nav = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to='/Profil' activeClassName={s.active}>Profile</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Dialogs' activeClassName={s.active}>Messeges</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/News' activeClassName={s.active}>News</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Music' activeClassName={s.active}>Music</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Settings' activeClassName={s.active}>Settings</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Users' activeClassName={s.active}>Users</NavLink>\n            </div>\n            <div>\n                <NavLink to='/Friends' activeClassName={s.active}><h3>FRIENDS</h3></NavLink>\n                <SidebarContainer/>\n            </div>\n        </nav>\n    )\n}\n\nexport default Nav","import React from 'react';\nimport s from './News.module.css';\n\n\nconst News = () => {\n    return (\n<div>\nNews\n</div>\n\n    )\n};\n\nexport default News;","import React from 'react';\nimport s from './Music.module.css';\n\n\nconst Music = () => {\n    return (\n<div>\nMusic\n</div>\n\n    )\n};\n\nexport default Music;","import React from 'react';\nimport s from './Settings.module.css';\n\n\nconst Settings = () => {\n    return (\n<div>\nSettings\n</div>\n\n    )\n};\n\nexport default Settings;","import {DialogType, MessegeType} from \"./redux-store\";\n\n\nconst UPDATE_NEW_MASSAGE_BODY = 'UPDATE-NEW-MASSAGE-BODY'\nconst ADD_MASSAGE = 'ADD-MASSAGE'\n\nexport type InitialStateDialogType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessegeType>\n    newMassageBody: string\n}\n\nlet initialState: InitialStateDialogType = {\n    dialogs: [\n        {\n            name: 'Dima',\n            id: 1,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Andrey',\n            id: 2,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Alex',\n            id: 3,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Sveta',\n            id: 4,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Vova',\n            id: 5,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Dora',\n            id: 6,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Oleg',\n            id: 7,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n    ],\n    messages: [\n        {message: 'hi', id: 1},\n        {message: 'good morning', id: 2},\n        {message: 'hello', id: 3},\n        {message: 'yo', id: 4},\n        {message: 'How is going', id: 5},\n        {message: 'Good bay', id: 6},\n        {message: 'good night', id: 7}\n    ],\n    newMassageBody: 'write here'\n}\n\nconst dialogReducer = (state: InitialStateDialogType = initialState, action: ActionsType): InitialStateDialogType => {\n    switch (action.type) {\n        case UPDATE_NEW_MASSAGE_BODY:\n            return {\n                ...state,\n                newMassageBody: action.body\n            }\n        case ADD_MASSAGE:\n            return {\n                ...state,\n                newMassageBody: '',\n                messages: [...state.messages, {message: state.newMassageBody, id: 8}]\n            }\n        default:\n            return state\n    }\n}\n\nexport const addMassageActionCreator = () => ({type: ADD_MASSAGE} as const)\nexport const updateNewMassageBodyActionCreator = (text: string) =>\n    ({type: UPDATE_NEW_MASSAGE_BODY, body: text} as const)\ntype ActionsType =\n    | ReturnType<typeof addMassageActionCreator>\n    | ReturnType<typeof updateNewMassageBodyActionCreator>\n\n\nexport default dialogReducer","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\nexport type PropsType = {\n    id: number\n    name: string\n    img: string\n}\n\nconst DialogItem = (props: PropsType) => {\n    return (\n        <div className={s.dialog }>\n            <img src={props.img} />\n            <NavLink to={'/dialogs/' + props.id}> {props.name} </NavLink>\n        </div>\n    )\n};\n\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css';\n\n\nconst Message = (props: { message: string }) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n};\n\n\nexport default Message;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Redirect} from 'react-router-dom';\n\n\nconst Dialogs = (props: DialogsPropsType) => {\n\n    let DialogElements = props.dialogPage.dialogs.map((d: {\n        img: string; name: string; id: number;\n    }) => <DialogItem name={d.name} id={d.id} img={d.img}/>)\n    let MessegesElements = props.dialogPage.messages.map((m: { message: string }) => <Message message={m.message}/>)\n    let onMassageClick = () => {\n        props.addMassage()\n    }\n    let onMasssgeChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let body = e.currentTarget.value\n        props.updateNewMassageBody(body)\n    }\n\n        return (\n            <div className={s.dialogs}>\n                <div className={s.dialogItems}>\n                    {DialogElements}\n                </div>\n                <div className={s.messages}>\n                    {MessegesElements}\n                </div>\n                <div>\n                    <textarea onChange={onMasssgeChange} value={props.dialogPage.newMassageBody}/>\n                    <button onClick={onMassageClick}>send</button>\n                </div>\n            </div>\n        )\n\n};\n\nexport default Dialogs;","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {AllAppStateType} from \"../Redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype mapStateToPropsForRedirect = {\n    isAuth: boolean\n}\n\nlet mapStateToPropsForRedirect = (state: AllAppStateType): mapStateToPropsForRedirect => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthComponent <T>(Component: ComponentType<T>) {\n    function RedirectComponent(props: mapStateToPropsForRedirect) {\n        let{isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}\n\nexport default withAuthComponent","import React, {ComponentType} from 'react';\nimport {\n    addMassageActionCreator,\n    InitialStateDialogType,\n    updateNewMassageBodyActionCreator\n} from '../../Redux/dialogReducer';\nimport Dialogs from \"./Dialogs\";\nimport {compose, Dispatch} from \"redux\";\nimport {AllAppStateType} from \"../../Redux/redux-store\";\nimport {connect} from 'react-redux';\nimport withAuthComponent from \"../../hoc/withAuthComponent\";\n\n\nexport type DialogsPropsType = MapStatePropsType & MapDispathPropsType\n\ntype MapStatePropsType = {\n    dialogPage: InitialStateDialogType\n\n}\n// type mapStateToPropsForRedirect = {\n//     isAuth: boolean\n// }\ntype MapDispathPropsType = {\n    addMassage: () => void\n    updateNewMassageBody: (body: string) => void\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        dialogPage: state.dialogPage,\n    }\n}\n\n// let mapStateToPropsForRedirect = (state: AllAppStateType): mapStateToPropsForRedirect => {\n//     return {\n//         isAuth: state.auth.isAuth\n//     }\n// }\n// // @ts-ignore\n// let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent)\n\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType => {\n    return {\n        addMassage: () => {\n            dispatch(addMassageActionCreator())\n        },\n        updateNewMassageBody: (body: string) => {\n            dispatch(updateNewMassageBodyActionCreator(body))\n        }\n    }\n}\n\n// export const AuthRedirectComponent = withAuthComponent(Dialogs)\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\nconst DialogsContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthComponent\n)(Dialogs);\nexport default DialogsContainer;\n\n","import React from 'react';\nimport s from './Friends.module.css';\n\n\nconst Friends = () => {\n    return (\n        <div>\n            Friends\n        </div>\n\n    )\n};\n\nexport default Friends;","import React, {useState} from \"react\";\nimport s from './Users.module.css';\nimport {UsersType} from \"../../Redux/usersReducer\";\nimport {NavLink} from 'react-router-dom'\nimport {usersApi} from \"../../api/api\";\n\ntype PropsType = {\n    setCurrentPage: (currentPage: number) => void\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    users: Array<UsersType>\n    follow: (userID: number) => void\n    unfollow: (userID: number) => void\n    onChangeNumber: (pageNumber: number) => void\n    followingInProgress: number[]\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => void\n\n}\n\nconst Users = (props: PropsType) => {\n\n    let pageCount = Math.ceil(props.totalUsersCount / props.pageSize);\n    let pages: number[] = [];\n\n    for (let i = 1; i <= pageCount; i++) {\n        pages.push(i)\n    }\n    let [currentPages, setCurrentPages] = useState(pages.slice(0, 10))\n\n    const ChangePagesToRight = () => {\n        currentPages = pages.slice(currentPages[0] + 9, currentPages[0] + 19)\n        setCurrentPages(currentPages)\n        props.onChangeNumber(currentPages[0])\n    }\n    const ChangePagesToLeft = () => {\n        currentPages = pages.slice(currentPages[0] - 11, currentPages[0] - 1)\n        setCurrentPages(currentPages)\n        props.onChangeNumber(currentPages[0])\n    }\n\n\n    return <div>\n        <div>\n            <button onClick={ChangePagesToLeft}>left</button>\n            {currentPages.map(p => {\n                return <span key={p} className={props.currentPage === p ? s.selectedPage : ''}\n                             onClick={(e) => props.onChangeNumber(p)}>{p} </span>\n            })}\n            <button onClick={ChangePagesToRight}>right</button>\n        </div>\n        {props.users.map(u =>\n            <div key={u.id}>\n                <div>\n                    <NavLink to={'/profil/' + u.id}>\n                        < img\n                            src={u.photos.small !== null ? u.photos.small : \"https://i.pinimg.com/originals/bd/bf/d0/bdbfd0d90f12604b1538e2049f1c981c.jpg\"}\n                            className={s.img}/>\n                    </NavLink>\n                </div>\n                <div>\n                    {u.followed\n                        ? <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => props.unfollow(u.id)\n                            // props.toggleFollowingInProgress(true, u.id)\n                            // usersApi.deleteFollow(u.id)    //axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {},\n                            //     //     {\n                            //     //         withCredentials: true,\n                            //     //         headers: {\n                            //     //             'API-KEY': 'fe02794e-87fe-4fe8-ada5-f6fa7d443c83'\n                            //     //         }\n                            //     //     })\n                            //     .then(data => {\n                            //         if (data.resultCode === 0) {\n                            //             props.unfollow(u.id)\n                            //         }\n                            //         props.toggleFollowingInProgress(false, u.id)\n                            //     })\n                        }>Unfollow</button>\n                        : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => props.follow(u.id)\n                            // props.toggleFollowingInProgress(true, u.id)\n                            // usersApi.postFollow(u.id)    // axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,\n                            //     //     {\n                            //     //         withCredentials: true,\n                            //     //         headers: {\n                            //     //             'API-KEY': 'fe02794e-87fe-4fe8-ada5-f6fa7d443c83'\n                            //     //         }\n                            //     //     })\n                            //     .then(data => {\n                            //         if (data.resultCode === 0) {\n                            //             props.follow(u.id)\n                            //         }\n                            //         props.toggleFollowingInProgress(false, u.id)\n                            //     })\n                        }>Follow</button>\n                    }\n                </div>\n                <div>{u.name}</div>\n                <div>{u.status}</div>\n            </div>\n        )}\n    </div>\n}\n\n\nexport default Users","export default __webpack_public_path__ + \"static/media/loader.3fb682f9.gif\";","import React  from \"react\";\nimport preloader from \"../images/loader.gif\";\n\nconst  Preloader = () => {\n    return <div><img src={preloader}/> </div>\n}\nexport default Preloader","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'fe02794e-87fe-4fe8-ada5-f6fa7d443c83'\n    }\n})\n\nexport const usersApi = {\n     getUsers (currentPage: number, pageSize: number)  {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data)\n    },\n   postFollow(id: number) {\n        return instance.post(`follow/${id}`, {})\n            .then(response => response.data)\n    },\n    deleteFollow (id: number) {\n        return instance.delete(`follow/${id}`)\n            .then(response => response.data)\n    },\n    getProfile (userId: number | string) {\n         console.log('Obsolete method. Please profileApi object')\n       return  profileApi.getProfile(userId)    // берет апишку с profileApi\n    }\n}\n\nexport const profileApi = {\n    getProfile (userId: number | string) {\n        return  instance.get('profile/' + userId)\n    },\n    getStatus (userId: number | string) {\n        return  instance.get('profile/status/' + userId)\n    },\n    updateStatus (status: string) {\n        return  instance.put('profile/status', {status: status})\n    }\n}\n\n\nexport const authApi = {\n    me() {\n        return instance.get(`auth/me`)\n            .then(response => response.data)\n    }\n}\n","import {usersApi} from \"../api/api\";\nimport {Dispatch} from \"redux\";\n\nconst FOLLOW_SUCCESS = 'FOLLOW-SUCCESS'; const UNFOLLOW_SUCCESS = 'UNFOLLOW-SUCCESS'; const SET_USERS = 'SET-USERS'\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'; const SET_USERS_TOTAL_COUNT = 'SET-USERS-TOTAL-COUNT'\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING'; const TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE-IS-FOLLOWING-PROGRESS'\n\nexport type UsersType = {\n    id: number\n    followed: boolean\n    name: string\n    status: string\n    location: {\n        city: string,\n        country: string\n    }\n\n    photos: {\n        small: string | null,\n        large: string | null\n    }\n}\nexport type InitialStateUsersType = {\n    users: Array<UsersType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\nlet initialState: InitialStateUsersType = {\n    users: [],\n    pageSize: 10,\n    totalUsersCount: 100,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: []\n}\n\nconst usersReducer = (state: InitialStateUsersType = initialState, action: ActionsType): InitialStateUsersType => {\n    switch (action.type) {\n        case FOLLOW_SUCCESS:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userID) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n        case UNFOLLOW_SUCCESS:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userID) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })\n            }\n        case SET_USERS:                                    // отрисовать полоьзователей\n            return {...state, users: [...action.newUsers]}\n        case SET_CURRENT_PAGE:\n            return {...state, currentPage: action.currentPage}\n            case SET_USERS_TOTAL_COUNT:\n            return {...state, totalUsersCount: action.count}\n            case TOGGLE_IS_FETCHING:\n            return {...state, isFetching: action.isFetching}\n            case TOGGLE_IS_FOLLOWING_PROGRESS:              // блокировка кнопки на время действия зафолоится (конкретной кнопки id)\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n            ? [...state.followingInProgress, action.userId]\n            : state.followingInProgress.filter(id => id !== action.userId)}\n        default:\n            return state\n    }\n}\n\nexport const followSuccess = (userID: number) => ({type: FOLLOW_SUCCESS, userID} as const)\nexport const unfollowSuccess = (userID: number) => ({type: UNFOLLOW_SUCCESS, userID} as const)\nexport const setUsers = (newUsers: Array<UsersType>) => ({type: SET_USERS, newUsers} as const)\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\nexport const setUsersTotalCount = (totalUsersCount: number) => ({type: SET_USERS_TOTAL_COUNT, count: totalUsersCount} as const)\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId} as const)\ntype ActionsType =\n    | ReturnType<typeof followSuccess>\n    | ReturnType<typeof unfollowSuccess>\n    | ReturnType<typeof setUsers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setUsersTotalCount>\n    | ReturnType<typeof toggleIsFetching>\n    | ReturnType<typeof toggleFollowingInProgress>\n\nexport const getUserThunkCreator = (currentPage: number, pageSize: number) => {\n    return (dispatch: Dispatch) => {\n        dispatch(toggleIsFetching(true));\n        usersApi.getUsers(currentPage, pageSize)   // axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`,\n            // {withCredentials: true})\n            .then(data => {\n                dispatch(toggleIsFetching(false))\n                dispatch(setUsers(data.items))\n                dispatch(setUsersTotalCount(data.totalCount))\n                dispatch(setCurrentPage(currentPage))\n\n            })\n    }\n} // санка\nexport const unfollow = ( userId: number) => {\n    return (dispatch: Dispatch) => {\n        dispatch(toggleFollowingInProgress(true, userId))\n        usersApi.deleteFollow(userId)    //axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {},\n            //     {\n            //         withCredentials: true,\n            //         headers: {\n            //             'API-KEY': 'fe02794e-87fe-4fe8-ada5-f6fa7d443c83'\n            //         }\n            //     })\n            .then(data => {\n                if (data.resultCode === 0) {\n                    dispatch(unfollowSuccess(userId))\n                }\n                dispatch(toggleFollowingInProgress(false, userId))\n            })\n    }\n}                                  // санка\nexport const follow = (userId: number) => {\n    return (dispatch: Dispatch) => {\n        dispatch(toggleFollowingInProgress(true, userId))\n        usersApi.postFollow(userId)    //axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {},\n            //     {\n            //         withCredentials: true,\n            //         headers: {\n            //             'API-KEY': 'fe02794e-87fe-4fe8-ada5-f6fa7d443c83'\n            //         }\n            //     })\n            .then(data => {\n                if (data.resultCode === 0) {\n                    dispatch(followSuccess(userId))\n                }\n                dispatch(toggleFollowingInProgress(false, userId))\n            })\n    }\n}                                     // санка\n\n\n\nexport default usersReducer","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {AllAppStateType} from \"../../Redux/redux-store\";\nimport Users from \"./Users\";\nimport Preloader from \"../../common/Preloader\";\nimport {\n    follow, unfollow, UsersType, setCurrentPage,\n    toggleFollowingInProgress, getUserThunkCreator,\n} from \"../../Redux/usersReducer\";\nimport {compose} from \"redux\";\nimport withAuthComponent from \"../../hoc/withAuthComponent\";\n\nexport type UsersPropsType = MapStatePropsType & MapDispathPropsType\ntype MapStatePropsType = {\n    users: Array<UsersType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: number[]\n}\ntype MapDispathPropsType = {\n    follow: (userID: number) => void\n    unfollow: (userID: number) => void\n    setCurrentPage: (pageNumber: number) => void\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => void\n    getUsers: (currentPage: number, pageSize: number) => void\n}\n\n\nclass UsersContainer extends React.Component<UsersPropsType> {\n\n    componentDidMount() {\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\n    }\n\n    onChangeNumber = (pageNumber: number) => {\n        this.props.getUsers(pageNumber, this.props.pageSize)\n    }\n\n    render() {\n        return <>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users totalUsersCount={this.props.totalUsersCount}\n                   pageSize={this.props.pageSize}\n                   currentPage={this.props.currentPage}\n                   users={this.props.users}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   onChangeNumber={this.onChangeNumber}\n                   setCurrentPage={this.props.setCurrentPage}\n                   followingInProgress={this.props.followingInProgress}\n                   toggleFollowingInProgress={this.props.toggleFollowingInProgress}/>\n        </>\n    }\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n        followingInProgress: state.usersPage.followingInProgress\n    }\n}\n\n// const UsersContainer = connect(mapStateToProps,\n//     {\n//         follow,\n//         unfollow,\n//         setCurrentPage,\n//         toggleFollowingInProgress,\n//         getUsers: getUserThunkCreator\n//     })(UsersAPIComponent)\n//\n// export default UsersContainer;\n\nexport  default  compose<React.ComponentType>(\n    connect(mapStateToProps,\n        {\n            follow,\n            unfollow,\n            setCurrentPage,\n            toggleFollowingInProgress,\n            getUsers: getUserThunkCreator\n        }),\n    withAuthComponent\n)(UsersContainer);","import React, {RefObject} from 'react';\nimport s from './ProfilInfo.module.css';\nimport {setUserStatus, updateStatus} from \"../../../Redux/profilReducer\";\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nclass ProfileStatus extends React.Component<PropsType> {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n\n    activateEditMode = ()  => {\n        this.setState({\n            editMode: true\n        })\n    }\n\n    deactivateEditMode = () => {\n        this.setState({\n            editMode: false\n        })\n        this.props.updateStatus(this.state.status)\n    }\n\n    onChangeStatus = (e: any) => {\n        this.setState ({\n            status: e.currentTarget.value\n        })\n    }\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (prevProps.status !== this.props.status) {\n            this.setState({\n                status: this.props.status\n            })\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n                {!this.state.editMode\n                    && <div>\n                        <span onDoubleClick={this.activateEditMode}> {this.props.status || \"my status\"}</span>\n                    </div>}\n                {\n                    this.state.editMode && <div>\n                        <input onChange={this.onChangeStatus} autoFocus={true} onBlur={this.deactivateEditMode} value={this.state.status}/>\n                    </div>\n\n                }\n            </div>\n        )\n    }\n}\n\n\nexport default ProfileStatus;","import React from 'react';\nimport s from './ProfilInfo.module.css';\nimport Preloader from \"../../../common/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\n\nexport type ProfilInfoPropsType = {\n    profil: ProfilType\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport type ProfilType = {\n    photos: {\n        large: string\n        small: string\n    }\n    aboutMe: string\n    lookingForAJob: boolean\n} | null\n\n\nconst ProfilInfo = (props: ProfilInfoPropsType) => {\n\n    if (props.profil === null) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div>\n                <img id={s.upimage}\n                     src='https://www.forestryservices.ie/wp-content/uploads/2019/05/color-conifer-daylight-1179229.jpg'/>\n            </div>\n            <div className={s.descriptionBlock}>\n                <div>\n                    <img src={props.profil.photos.large}/>\n                </div>\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n                {props.profil.aboutMe}\n            </div>\n            <div>\n                Job: {props.profil.lookingForAJob\n                ? 'Looking for a job'\n                : 'Employed'}\n            </div>\n        </div>\n    )\n};\n\nexport default ProfilInfo;","import {ProfilType} from \"../components/Profil/ProfilInfo/ProfilInfo\";\nimport {profileApi, usersApi} from \"../api/api\";\nimport {Dispatch} from \"redux\";\n\nconst ADD_POST = 'ADD-POST'\nconst UPDATE_NEW_POST = 'UPDATE-NEW-POST'\nconst SET_USER_PROFIL = 'SET-USER-PROFIL'\nconst SET_USER_STATUS = 'SET-USER-STATUS'\n\n\nexport type PostType = {\n    message: string\n    id: number\n    likecount: string\n}\n\nexport type InitialStatePostType = {\n    posts: Array<PostType>\n    newPostText: string\n    profil: ProfilType\n    status: string\n}\n\nlet initialState: InitialStatePostType = {\n    posts: [\n        {message: 'Hi, how are you?', id: 1, likecount: \"15\"},\n        {message: \"It's my first post\", id: 2, likecount: \"16\"},\n        {message: \"blablabla\", id: 3, likecount: \"11\"}\n    ],\n    newPostText: 'it-kamasutra',\n    profil: null,\n    status: ''\n\n}\n\nconst profilReducer = (state: InitialStatePostType = initialState, action: ActionsType): InitialStatePostType => {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                newPostText: '',\n                posts: [...state.posts, {id: 4, message: state.newPostText, likecount: '0'}]\n            }\n        case UPDATE_NEW_POST:\n            return {\n                ...state,\n                newPostText: action.text\n            }\n        case SET_USER_PROFIL:\n            return {\n                ...state,\n                profil: action.profil\n            }\n            case SET_USER_STATUS:\n            return {\n                ...state,\n                status: action.status\n            }\n        default:\n            return state\n    }\n}\n\nexport const addPostActionCreator = () => ({type: ADD_POST} as const)\nexport const setUserProfil = (profil: ProfilType) => ({type: SET_USER_PROFIL, profil} as const)\nexport const setUserStatus = (status: string) => ({type: SET_USER_STATUS, status} as const)\nexport const updateNewPostTextActionCreator = (text: string) =>\n    ({type: UPDATE_NEW_POST, text} as const)\ntype ActionsType =\n    | ReturnType<typeof addPostActionCreator>\n    | ReturnType<typeof updateNewPostTextActionCreator>\n    | ReturnType<typeof setUserProfil>\n    | ReturnType<typeof setUserStatus>\n\nexport const getUserProfil = (userId: string) => {\n    return (dispatch: Dispatch) => {\n        usersApi.getProfile(userId)\n            .then(response => {\n                dispatch(setUserProfil(response.data))\n            })\n    }\n}    //санка\n\nexport const getUserStatus = (userId: string) => {\n    return (dispatch: Dispatch) => {\n        profileApi.getStatus(userId)\n            .then(response => {\n                dispatch(setUserStatus(response.data))\n            })\n    }\n}\nexport const updateStatus = (status: string) => {\n    return (dispatch: Dispatch) => {\n        profileApi.updateStatus(status)\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                dispatch(setUserStatus(status))\n                }\n            })\n\n    }\n}\n\n\nexport default profilReducer","import React from 'react';\nimport s from './Post.module.css';\n\ntype PropsType = {\n    message: string\n    likecount: string\n}\n\n\nconst Post = (props: PropsType) => {\n    return (\n\n        <div className={s.itemm}>\n            <img  src='https://topmsg.ru/wp-content/uploads/voin-v-chernom-kostyume.jpg' />\n             { props.message }\n            <div>\n                <span> like </span> {props.likecount}\n            </div>\n        </div>\n\n    )\n};\n\nexport default Post;","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {ProfilPropsType} from \"./MyPostsContainer\";\n\n// export type PostType = {\n//     message: string\n//     id: number\n//     likecount: string\n// }\n// type PropsType = {\n//     posts: Array<PostType>\n//     newPostText: string\n//     updateNewPostText: (text: string) => void\n//     addPost: () => void\n// }\nconst MyPosts = (props: ProfilPropsType) => {\n    let PostsElements = props.profilPage.posts.map(p => <Post key={p.id} message={p.message} likecount={p.likecount}/>)\n    let onAddPost = () => {\n        props.addPost()                                                                                                  //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n    }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let text = e.currentTarget.value\n        props.updateNewPostText(text)                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n    }\n    return (\n        <div className={s.mypost}>\n            <h3>My posts</h3>\n            <div>\n                <textarea onChange={onPostChange} value={props.profilPage.newPostText}/>\n            </div>\n            <div>\n                <button onClick={onAddPost}>Add post</button>\n            </div>\n            {PostsElements}\n        </div>\n    )\n};\n\nexport default MyPosts;","import React from 'react';\nimport {\n    addPostActionCreator,\n    InitialStatePostType,\n    updateNewPostTextActionCreator\n} from \"../../../Redux/profilReducer\";\nimport {Dispatch} from \"redux\";\nimport {AllAppStateType} from \"../../../Redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport MyPosts from \"./MyPosts\";\n\n// type PropsType = {\n//     store: Store\n// }\n//const MyPostsContainer = (props: PropsType) => {\n//     let state = props.store.getState()\n//\n//     let addPost = () => {\n//         props.store.dispatch(addPostActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n//     }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n//     let onPostChange = (text: string) => {\n//         let action = updateNewPostTextActionCreator(text)\n//         props.store.dispatch(action)                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n//     }\n//return (\n//        <MyPosts updateNewPostText={onPostChange}\n//                 addPost={addPost}\n//                 posts={state.profilPage.posts}\n//                 newPostText={state.profilPage.newPostText} />\n//     )};\n\nexport type ProfilPropsType = MapStatePropsType & MapDispathPropsType\n\ntype MapStatePropsType = {\n    profilPage: InitialStatePostType\n}\ntype MapDispathPropsType = {\n    addPost: () => void\n    updateNewPostText: (text: string) => void\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        profilPage: state.profilPage\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType => {\n    return {\n        addPost: () => {\n            dispatch(addPostActionCreator())\n        },\n        updateNewPostText: (text: string) => {\n            dispatch(updateNewPostTextActionCreator(text))\n        }\n    }\n}\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;","import React from 'react';\nimport s from './Profil.module.css';\nimport ProfilInfo, {ProfilInfoPropsType} from './ProfilInfo/ProfilInfo';\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\n\nconst Profil = (props:ProfilInfoPropsType) => {\n    return (\n        <div className={s.content}>\n            <ProfilInfo profil={props.profil} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profil;","import React from 'react';\nimport Profil from \"./Profil\";\nimport {AllAppStateType} from \"../../Redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {getUserProfil, getUserStatus, updateStatus} from \"../../Redux/profilReducer\";\nimport {ProfilType} from \"./ProfilInfo/ProfilInfo\";\nimport { RouteComponentProps, withRouter} from 'react-router-dom';\nimport withAuthComponent from \"../../hoc/withAuthComponent\";\nimport {compose} from \"redux\";\n\n\n\n\ntype MapStatePropsType = {\n    profil: ProfilType\n    status: string\n}\ntype MapDispathPropsType = {\n    getUserProfil: (id: string) => void\n    getUserStatus: (id: string) => void\n    updateStatus:  (status: string) => void\n}\nexport type UsersPropsType = MapStatePropsType & MapDispathPropsType\ntype PathParamsType = {\n    userId: string,\n}\ntype PropsType = RouteComponentProps<PathParamsType> & UsersPropsType\n\nclass ProfilContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId: string | number = this.props.match.params.userId\n        if (!userId) {\n            userId = '11914'\n        }\n        this.props.getUserProfil(userId)\n        this.props.getUserStatus(userId)\n    }\n\n    render() {\n        return (\n            <div>\n                <Profil  {...this.props} profil={this.props.profil} status={this.props.status}  updateStatus={this.props.updateStatus}/>\n            </div>\n        )\n    }\n\n}\n\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        profil: state.profilPage.profil,\n        status: state.profilPage.status\n    }\n}\n\n// let AuthRedirectComponent = withAuthComponent(ProfilContainer)\n// let WithUrlDataProfilContainer = withRouter(AuthRedirectComponent)\n// export default connect(mapStateToProps,\n//     {\n//         getUserProfil\n//     })(WithUrlDataProfilContainer)\n\nexport  default  compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfil, getUserStatus, updateStatus}),\n    withRouter,\n    withAuthComponent\n)(ProfilContainer);\n\n","import React from 'react';\nimport s from './Header.module.css';\nimport {NavLink} from 'react-router-dom'\n\ntype PropsType = {\n    login: string | null\n    isAuth: boolean\n}\nconst Header = (props: PropsType) => {\n    return (\n        <header className={s.header}>\n            <img src='https://img1.pnghut.com/24/13/23/GCM7vZjvN9/grass-leaf-ecosystem-environmental-science-green.jpg'\n                 alt='backfone'/>\n            <div className={s.loginBlock}>\n                {props.isAuth\n                    ? props.login\n                    : <NavLink to={'/login'} className={s.login}>Login</NavLink>}\n            </div>\n        </header>\n    )\n}\n\nexport default Header","import {authApi} from \"../api/api\";\nimport {Dispatch} from \"redux\";\n\nconst SET_AUTH_USER_DATA = 'SET-AUTH-USER-DATA'\n\n\nexport type InitialStateAuthType = {\n    id: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n}\nlet initialState: InitialStateAuthType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nconst authReducer = (state: InitialStateAuthType = initialState, action: ActionsType): InitialStateAuthType => {\n    switch (action.type) {\n        case SET_AUTH_USER_DATA: {\n            return {\n                ...state,\n                ...action.data,\n                isAuth: true\n            }\n        }\n        default:\n            return state\n    }\n}\n\n\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null) =>\n    ({\n        type: SET_AUTH_USER_DATA,\n        data: {id, email, login}\n    } as const)\n\n\ntype ActionsType = ReturnType<typeof setAuthUserData>\n\nexport const getAuthUserData = () =>  {\n    return (dispatch: Dispatch) => {\n        authApi.me()\n            // axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {withCredentials: true})\n            .then(data => {\n                if (data.resultCode === 0) {\n                    let {id, email, login} = data.data\n                    dispatch(setAuthUserData(id, email, login))\n                }\n            })\n    }\n}\n\nexport default authReducer","import React from 'react';\nimport {connect} from \"react-redux\";\nimport Header from \"./Header\";\nimport {AllAppStateType} from \"../../Redux/redux-store\";\nimport {getAuthUserData} from \"../../Redux/authReducer\";\n\nexport type PropsType = MapStatePropsType & MapDispathPropsType\n\n\ntype MapStatePropsType = {\n    login: string | null\n    isAuth: boolean\n}\ntype MapDispathPropsType = {\n    getAuthUserData: () => void\n}\n\nclass HeaderContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        this.props.getAuthUserData()\n    }\n\n    render() {\n        return <Header\n            {...this.props}\n            login={this.props.login}\n            isAuth={this.props.isAuth}/>\n\n    }\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        login: state.auth.login,\n        isAuth: state.auth.isAuth\n    }\n}\n\n\n\nexport default connect(mapStateToProps, {getAuthUserData})(HeaderContainer)","import React from \"react\";\nimport  {InjectedFormProps, Field, reduxForm} from \"redux-form\";\n\ntype LoginFormDataType = {\n    login: string\n    pasword: string\n    rememberMe: boolean\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType>> = (props) => {\n    return<form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Login'} name={'login'} component={'input'}/>\n            </div>\n            <div>\n                <Field placeholder={'Password'} name={'password'} component={'input'}/>\n            </div>\n            <div>\n                <Field type={'checkbox'} name={'rememberMe'} component={'input'}/> remember me\n            </div>\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n}\n\nconst LoginReduxForm = reduxForm<LoginFormDataType>({form: 'login'})(LoginForm);\n\nconst Login = () => {\n    const onSubmit = (dataForm: LoginFormDataType) => {\n        console.log(dataForm)\n    }\n    return <div>\n        <h1>LOGIN</h1>\n        <LoginReduxForm  onSubmit={onSubmit}/>\n    </div>\n}\n\nexport default Login","import React from 'react';\nimport './App.css';\nimport {Route} from 'react-router-dom';\nimport Nav from './components/Nav/Nav';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport Friends from \"./components/Sidebar/Friends\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfilContainer from \"./components/Profil/ProfilContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\n\n\n\nconst App: React.FC = () => {\n    return (\n        <div className='app-wrapper'>\n            <HeaderContainer/>\n            <Nav/>\n            <div className='app-wrapper-content'>\n                <Route path='/profil' render={() => <ProfilContainer />}/>\n                <Route path='/dialogs' render={() => <DialogsContainer />}/>\n                <Route path='/news' render={() => <News/>}/>\n                <Route path='/music' render={() => <Music/>}/>\n                <Route path='/settings' render={() => <Settings/>}/>\n                <Route path='/users' render={() => <UsersContainer />}/>\n                <Route path='/friends' render={() => <Friends/>}/>\n                <Route path='/login' render={() => <Login/>}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nexport type FriendType = {\n    name: string\n    id: number\n    img: string\n}\nexport type SidebarType = {\n    friends: Array<FriendType>\n}\n\nlet initialState: SidebarType = {\n        friends: [\n            {name: 'Dima', id: 1, img: 'https://image.freepik.com/free-vector/cute-blue-wolf-avatar_79416-81.jpg'},\n            {name: 'Dora', id: 2, img: 'https://image.freepik.com/free-vector/cute-blue-wolf-avatar_79416-81.jpg'},\n            {name: 'Oleg', id: 3, img: 'https://image.freepik.com/free-vector/cute-blue-wolf-avatar_79416-81.jpg'},\n        ]\n}\n\nconst sidebarReducer = (state = initialState, action: any) => {\n\n    return state\n}\n\nexport default sidebarReducer","import dialogReducer from \"./dialogReducer\";\nimport sidebarReducer from \"./sidebarReducer\";\nimport profilReducer from \"./profilReducer\";\nimport {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\nimport usersReducer from \"./usersReducer\";\nimport authReducer from \"./authReducer\";\nimport thunkMiddleWare from 'redux-thunk';\nimport { reducer as formReducer } from 'redux-form'\n\nexport type DialogType = {\n    name: string\n    id: number\n    img: string\n}\nexport type MessegeType = {\n    message: string\n    id: number\n}\n\n\nexport const rootReducer = combineReducers({\n    dialogPage: dialogReducer,\n    profilPage: profilReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer\n})\nlet store: Store = createStore(rootReducer, applyMiddleware(thunkMiddleWare))\nexport type AllAppStateType = ReturnType<typeof rootReducer>\nexport  default store\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\n import store, {AllAppStateType} from \"./Redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\n\n  let rerenderEntireTree = (state: AllAppStateType) => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <BrowserRouter>\n                <Provider store={store} >\n                <App />\n                {/*//bind(store) говорит о том что если в обьекте есть this то он всегда относится к store. часто функции */}\n                {/*// callback может вызватся в другом месте где будет методом другого обьекта(к примеру props.addPost())*/}\n                </Provider>\n            </ BrowserRouter>,\n        </React.StrictMode>, document.getElementById('root'));\n}\nrerenderEntireTree(store.getState())\nstore.subscribe(() => {\n    let state = store.getState();\n    rerenderEntireTree(state)\n})\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"messages\":\"Dialogs_messages__1w_Up\",\"dialogItems\":\"Dialogs_dialogItems__3flRc\",\"active\":\"Dialogs_active__2sQhs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Sidebar_img__3-mF3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"loginBlock\":\"Header_loginBlock__6mma5\",\"login\":\"Header_login__3V3Qa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Users_img__3OuDf\",\"selectedPage\":\"Users_selectedPage__J63sh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"upimage\":\"ProfilInfo_upimage__3naf_\",\"descriptionBlock\":\"ProfilInfo_descriptionBlock__1fw3e\"};"],"sourceRoot":""}