{"ast":null,"code":"import { addMassageActionCreator, updateNewMassageBodyActionCreator } from '../../Redux/dialogReducer';\nimport Dialogs from \"./Dialogs\";\nimport { connect } from 'react-redux'; // const DialogsContainer = (props: PropsType) => {\n//\n//     let addMassage = () => {\n//         props.store.dispatch(addMassageActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n//     }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n//     let onMasssgeChange = (body: string) => {\n//         props.store.dispatch(updateNewMassageBodyActionCreator(body))                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n//     }\n//     return (\n//         <Dialogs dialogs={props.store.getState().dialogPage.dialogs}\n//                  messages={props.store.getState().dialogPage.messages}\n//                  updateNewMassageBody={onMasssgeChange}\n//                  addMassage={addMassage}\n//                  newMassageBody={props.store.getState().dialogPage.newMassageBody}/>\n//     )\n// };\n\nlet mapStateToProps = state => {\n  return {\n    dialogPage: state.dialogPage\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMassage: () => {\n      dispatch(addMassageActionCreator());\n    },\n    updateNewMassageBody: body => {\n      dispatch(updateNewMassageBodyActionCreator(body));\n    }\n  };\n};\n\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\nexport default DialogsContainer;","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Dialogs/DialogsContainer.tsx"],"names":["addMassageActionCreator","updateNewMassageBodyActionCreator","Dialogs","connect","mapStateToProps","state","dialogPage","mapDispatchToProps","dispatch","addMassage","updateNewMassageBody","body","DialogsContainer"],"mappings":"AACA,SACIA,uBADJ,EAGIC,iCAHJ,QAIO,2BAJP;AAKA,OAAOC,OAAP,MAAoB,WAApB;AAGA,SAAQC,OAAR,QAAsB,aAAtB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA,IAAIC,eAAe,GAAIC,KAAD,IAA+C;AACjE,SAAO;AACHC,IAAAA,UAAU,EAAED,KAAK,CAACC;AADf,GAAP;AAGH,CAJD;;AAKA,MAAMC,kBAAkB,GAAIC,QAAD,IAA6C;AACpE,SAAO;AACHC,IAAAA,UAAU,EAAE,MAAM;AACdD,MAAAA,QAAQ,CAACR,uBAAuB,EAAxB,CAAR;AACH,KAHE;AAIHU,IAAAA,oBAAoB,EAAGC,IAAD,IAAkB;AACpCH,MAAAA,QAAQ,CAACP,iCAAiC,CAACU,IAAD,CAAlC,CAAR;AACH;AANE,GAAP;AAQH,CATD;;AAUA,MAAMC,gBAAgB,GAAGT,OAAO,CAACC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CL,OAA7C,CAAzB;AAEA,eAAeU,gBAAf","sourcesContent":["import React from 'react';\nimport {\n    addMassageActionCreator,\n    InitialStateType,\n    updateNewMassageBodyActionCreator\n} from '../../Redux/dialogReducer';\nimport Dialogs from \"./Dialogs\";\nimport {Dispatch} from \"redux\";\nimport {AllAppStateType} from \"../../Redux/redux-store\";\nimport {connect} from 'react-redux';\n\n\n// const DialogsContainer = (props: PropsType) => {\n//\n//     let addMassage = () => {\n//         props.store.dispatch(addMassageActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n//     }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n//     let onMasssgeChange = (body: string) => {\n//         props.store.dispatch(updateNewMassageBodyActionCreator(body))                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n//     }\n//     return (\n//         <Dialogs dialogs={props.store.getState().dialogPage.dialogs}\n//                  messages={props.store.getState().dialogPage.messages}\n//                  updateNewMassageBody={onMasssgeChange}\n//                  addMassage={addMassage}\n//                  newMassageBody={props.store.getState().dialogPage.newMassageBody}/>\n//     )\n// };\n\nexport type DialogsPropsType = MapStatePropsType & MapDispathPropsType\n\ntype MapStatePropsType = {\n    dialogPage: InitialStateType\n}\ntype MapDispathPropsType = {\n    addMassage: () => void\n    updateNewMassageBody: (body: string) => void\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        dialogPage: state.dialogPage\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType => {\n    return {\n        addMassage: () => {\n            dispatch(addMassageActionCreator())\n        },\n        updateNewMassageBody: (body: string) => {\n            dispatch(updateNewMassageBodyActionCreator(body))\n        }\n    }\n}\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\n\nexport default DialogsContainer;"]},"metadata":{},"sourceType":"module"}