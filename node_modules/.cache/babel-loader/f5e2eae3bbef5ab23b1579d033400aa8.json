{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Dialogs/Dialogs.tsx\";\nimport React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport { updateNewPostTextActionCreator } from \"../../Redux/State\";\n\nconst Dialogs = props => {\n  let DialogElements = props._state.dialogs.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n    name: d.name,\n    id: d.id,\n    img: d.img\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 54\n  }, this));\n\n  let MessegesElements = props._state.messages.map(m => /*#__PURE__*/_jsxDEV(Message, {\n    message: m.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 83\n  }, this));\n\n  let addMassage = () => {\n    props.dispatch(addMActionCreator()); //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n  }; // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n\n\n  let onMasssgeChange = e => {\n    let text = e.currentTarget.value;\n    props.dispatch(updateNewPostTextActionCreator(text)); //функция которая сидит в state и обновляет данные при написании текста textarea\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.dialogs,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.dialogItems,\n      children: DialogElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.messages,\n      children: MessegesElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        onChange: onMasssgeChange,\n        value: props.newMassageBody\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Dialogs;\nexport default Dialogs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dialogs\");","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Dialogs/Dialogs.tsx"],"names":["React","s","DialogItem","Message","updateNewPostTextActionCreator","Dialogs","props","DialogElements","_state","dialogs","map","d","name","id","img","MessegesElements","messages","m","message","addMassage","dispatch","addMActionCreator","onMasssgeChange","e","text","currentTarget","value","dialogItems","newMassageBody"],"mappings":";;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,sBAAd;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAA8CC,8BAA9C,QAAmF,mBAAnF;;AAMA,MAAMC,OAAO,GAAIC,KAAD,IAAsB;AAGlC,MAAIC,cAAc,GAAGD,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAqBC,GAArB,CAA2BC,CAAD,iBACE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,CAAC,CAACC,IAApB;AAA0B,IAAA,EAAE,EAAED,CAAC,CAACE,EAAhC;AAAoC,IAAA,GAAG,EAAEF,CAAC,CAACG;AAA3C;AAAA;AAAA;AAAA;AAAA,UAD5B,CAArB;;AAEA,MAAIC,gBAAgB,GAAGT,KAAK,CAACE,MAAN,CAAaQ,QAAb,CAAsBN,GAAtB,CAA4BO,CAAD,iBAA4B,QAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,CAAC,CAACC;AAApB;AAAA;AAAA;AAAA;AAAA,UAAvD,CAAvB;;AAEA,MAAIC,UAAU,GAAG,MAAM;AACnBb,IAAAA,KAAK,CAACc,QAAN,CAAeC,iBAAiB,EAAhC,EADmB,CACoH;AAC1I,GAFD,CAPkC,CASuF;;;AACzH,MAAIC,eAAe,GAAIC,CAAD,IAAyC;AAC3D,QAAIC,IAAI,GAAGD,CAAC,CAACE,aAAF,CAAgBC,KAA3B;AACApB,IAAAA,KAAK,CAACc,QAAN,CAAehB,8BAA8B,CAACoB,IAAD,CAA7C,EAF2D,CAE6E;AAC3I,GAHD;;AAIA,sBAEI;AAAK,IAAA,SAAS,EAAEvB,CAAC,CAACQ,OAAlB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAGR,CAAC,CAAC0B,WAAnB;AAAA,gBACKpB;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAEN,CAAC,CAACe,QAAlB;AAAA,gBACKD;AADL;AAAA;AAAA;AAAA;AAAA,YAJJ,eAOI;AAAA,8BACI;AAAU,QAAA,QAAQ,EAAEO,eAApB;AAAsC,QAAA,KAAK,EAAEhB,KAAK,CAACsB;AAAnD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAgBH,CA9BD;;KAAMvB,O;AAgCN,eAAeA,OAAf","sourcesContent":["import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport {addPostActionCreator, DialogPageType, updateNewPostTextActionCreator} from \"../../Redux/State\";\n\ntype PropsType = {\n    _state: DialogPageType;\n    newMassageBody: string\n}\nconst Dialogs = (props: PropsType) => {\n    \n\n    let DialogElements = props._state.dialogs.map( (d: {\n        img: string; name: string; id: number; }) => <DialogItem name={d.name} id={d.id} img={d.img}/>)\n    let MessegesElements = props._state.messages.map( (m: { message: string }) => <Message message={m.message} />)\n\n    let addMassage = () => {\n        props.dispatch(addMActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n    }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n    let onMasssgeChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let text = e.currentTarget.value\n        props.dispatch(updateNewPostTextActionCreator(text))                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n    }\n    return (\n\n        <div className={s.dialogs}>\n            <div className={ s.dialogItems}>\n                {DialogElements}\n            </div>\n            <div className={s.messages}>\n                {MessegesElements}\n            </div>\n            <div>\n                <textarea onChange={onMasssgeChange}  value={props.newMassageBody} />\n                <button>send</button>\n            </div>\n        </div>\n\n    )\n};\n\nexport default Dialogs;"]},"metadata":{},"sourceType":"module"}