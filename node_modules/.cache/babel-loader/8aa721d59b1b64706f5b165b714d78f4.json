{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Users/UsersContainer.tsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { followAC, unFollowAC, setUsersAC, setCurrentPageAC, setUsersTotalCountAC } from \"../../Redux/usersReducer\";\nimport axios from \"axios\";\nimport Users from \"./Users\";\nimport preloader from \"../../images/loading-svgrepo-com.svg\";\n\nclass UsersAPIComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onChangeNumber = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(resolve => {\n        this.props.setUsers(resolve.data.items);\n        this.props.setUsersTotalCount(resolve.data.totalCount);\n      });\n    };\n  }\n\n  componentDidMount() {\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(resolve => {\n      this.props.setUsers(resolve.data.items);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: preloader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 38\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        users: this.props.users,\n        follow: this.props.follow,\n        unfollow: this.props.unfollow,\n        onChangeNumber: this.onChangeNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    follow: userID => {\n      dispatch(followAC(userID));\n    },\n    unfollow: userID => {\n      dispatch(unFollowAC(userID));\n    },\n    setUsers: users => {\n      dispatch(setUsersAC(users));\n    },\n    setCurrentPage: pageNumber => {\n      dispatch(setCurrentPageAC(pageNumber));\n    },\n    setUsersTotalCount: totalCount => {\n      dispatch(setUsersTotalCountAC(totalCount));\n    }\n  };\n};\n\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersAPIComponent);\nexport default UsersContainer;","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Users/UsersContainer.tsx"],"names":["React","connect","followAC","unFollowAC","setUsersAC","setCurrentPageAC","setUsersTotalCountAC","axios","Users","UsersAPIComponent","Component","onChangeNumber","pageNumber","props","setCurrentPage","get","pageSize","then","resolve","setUsers","data","items","setUsersTotalCount","totalCount","componentDidMount","currentPage","render","isFetching","preloader","totalUsersCount","users","follow","unfollow","mapStateToProps","state","usersPage","mapDispatchToProps","dispatch","userID","UsersContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {AllAppStateType} from \"../../Redux/redux-store\";\nimport {\n    followAC,\n    unFollowAC,\n    setUsersAC,\n    UsersType,\n    setCurrentPageAC,\n    setUsersTotalCountAC\n} from \"../../Redux/usersReducer\";\nimport axios from \"axios\";\nimport Users from \"./Users\";\nimport preloader from \"../../images/loading-svgrepo-com.svg\"\n\nexport type UsersPropsType = MapStatePropsType & MapDispathPropsType\n\ntype MapStatePropsType = {\n    users: Array<UsersType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n}\ntype MapDispathPropsType = {\n    follow: (userID: number) => void\n    unfollow: (userID: number) => void\n    setUsers: (newUsers: Array<UsersType>) => void\n    setCurrentPage: (pageNumber: number) => void\n    setUsersTotalCount: (totalUsersCount: number) => void\n}\n\nclass UsersAPIComponent extends React.Component<UsersPropsType> {\n\n    componentDidMount() {\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\n            .then(resolve => {\n                this.props.setUsers(resolve.data.items)\n            })\n    }\n\n    onChangeNumber = (pageNumber: number): void => {\n        this.props.setCurrentPage(pageNumber);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\n            .then(resolve => {\n                this.props.setUsers(resolve.data.items)\n                this.props.setUsersTotalCount(resolve.data.totalCount)\n            })\n    }\n\n    render()\n    {\n        return <>\n            {this.props.isFetching ? <img src={preloader}/> : null}\n            <Users totalUsersCount={this.props.totalUsersCount}\n                      pageSize={this.props.pageSize}\n                      currentPage={this.props.currentPage}\n                      users={this.props.users}\n                      follow={this.props.follow}\n                      unfollow={this.props.unfollow}\n                      onChangeNumber={this.onChangeNumber}/>\n                      </>\n    }\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType => {\n    return {\n        follow: (userID) => {\n            dispatch(followAC(userID))\n        },\n        unfollow: (userID) => {\n            dispatch(unFollowAC(userID))\n        },\n        setUsers: (users) => {\n            dispatch(setUsersAC(users))\n        },\n        setCurrentPage: (pageNumber) => {\n            dispatch(setCurrentPageAC(pageNumber))\n        },\n        setUsersTotalCount: (totalCount) => {\n            dispatch(setUsersTotalCountAC(totalCount))\n        },\n\n    }\n\n}\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersAPIComponent)\n\nexport default UsersContainer;"]},"metadata":{},"sourceType":"module"}