{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Dialogs/DialogsContainer.tsx\";\nimport React from 'react';\nimport { addMassageActionCreator, updateNewMassageBodyActionCreator } from '../../Redux/dialogReducer';\nimport Dialogs from \"./Dialogs\";\nimport store from \"../../Redux/redux-store\";\nimport { connect } from 'react-redux';\n\nconst DialogsContainer = props => {\n  let addMassage = () => {\n    props.store.dispatch(addMassageActionCreator()); //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n  }; // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n\n\n  let onMasssgeChange = body => {\n    props.store.dispatch(updateNewMassageBodyActionCreator(body)); //функция которая сидит в state и обновляет данные при написании текста textarea\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialogs, {\n    dialogs: props.store.getState().dialogPage.dialogs,\n    messages: props.store.getState().dialogPage.messages,\n    updateNewMassageBody: onMasssgeChange,\n    addMassage: addMassage,\n    newMassageBody: props.store.getState().dialogPage.newMassageBody\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n_c = DialogsContainer;\n\nlet mapStateToProps = state => {\n  return {\n    dialogPage: state.dialogPage\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMassage: () => {\n      store.dispatch(addMassageActionCreator());\n    },\n    onMasssgeChange: body => {\n      store.dispatch(updateNewMassageBodyActionCreator(body));\n    }\n  };\n};\n\nconst superDialogContainer = connect();\nexport default DialogsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DialogsContainer\");","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Dialogs/DialogsContainer.tsx"],"names":["React","addMassageActionCreator","updateNewMassageBodyActionCreator","Dialogs","store","connect","DialogsContainer","props","addMassage","dispatch","onMasssgeChange","body","getState","dialogPage","dialogs","messages","newMassageBody","mapStateToProps","state","mapDispatchToProps","superDialogContainer"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,uBAAR,EAAmDC,iCAAnD,QAA2F,2BAA3F;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAOC,KAAP,MAAqC,yBAArC;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAOA,MAAMC,gBAAgB,GAAIC,KAAD,IAAsB;AAE3C,MAAIC,UAAU,GAAG,MAAM;AACnBD,IAAAA,KAAK,CAACH,KAAN,CAAYK,QAAZ,CAAqBR,uBAAuB,EAA5C,EADmB,CACgI;AACtJ,GAFD,CAF2C,CAI8E;;;AACzH,MAAIS,eAAe,GAAIC,IAAD,IAAkB;AACpCJ,IAAAA,KAAK,CAACH,KAAN,CAAYK,QAAZ,CAAqBP,iCAAiC,CAACS,IAAD,CAAtD,EADoC,CAC6G;AACpJ,GAFD;;AAGA,sBACI,QAAC,OAAD;AAAS,IAAA,OAAO,EAAEJ,KAAK,CAACH,KAAN,CAAYQ,QAAZ,GAAuBC,UAAvB,CAAkCC,OAApD;AACS,IAAA,QAAQ,EAAEP,KAAK,CAACH,KAAN,CAAYQ,QAAZ,GAAuBC,UAAvB,CAAkCE,QADrD;AAES,IAAA,oBAAoB,EAAEL,eAF/B;AAGS,IAAA,UAAU,EAAEF,UAHrB;AAIS,IAAA,cAAc,EAAED,KAAK,CAACH,KAAN,CAAYQ,QAAZ,GAAuBC,UAAvB,CAAkCG;AAJ3D;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAfD;;KAAMV,gB;;AA2BN,IAAIW,eAAe,GAAIC,KAAD,IAAgD;AAClE,SAAO;AACHL,IAAAA,UAAU,EAAEK,KAAK,CAACL;AADf,GAAP;AAGH,CAJD;;AAMA,MAAMM,kBAAkB,GAAIV,QAAD,IAA6B;AACpD,SAAO;AACHD,IAAAA,UAAU,EAAE,MAAM;AACdJ,MAAAA,KAAK,CAACK,QAAN,CAAeR,uBAAuB,EAAtC;AACH,KAHE;AAIHS,IAAAA,eAAe,EAAGC,IAAD,IAAkB;AAC/BP,MAAAA,KAAK,CAACK,QAAN,CAAeP,iCAAiC,CAACS,IAAD,CAAhD;AACH;AANE,GAAP;AAUH,CAXD;;AAYC,MAAMS,oBAAoB,GAAGf,OAAO,EAApC;AAED,eAAeC,gBAAf","sourcesContent":["import React from 'react';\nimport {addMassageActionCreator, InitialStateType, updateNewMassageBodyActionCreator} from '../../Redux/dialogReducer';\nimport Dialogs from \"./Dialogs\";\nimport {Store} from \"redux\";\nimport store, {AllAppStateType} from \"../../Redux/redux-store\";\nimport {connect} from 'react-redux';\nimport {ActionsTypes} from \"../../Redux/Store\";\n\n\ntype PropsType = {\n    store: Store\n}\nconst DialogsContainer = (props: PropsType) => {\n\n    let addMassage = () => {\n        props.store.dispatch(addMassageActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n    }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n    let onMasssgeChange = (body: string) => {\n        props.store.dispatch(updateNewMassageBodyActionCreator(body))                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n    }\n    return (\n        <Dialogs dialogs={props.store.getState().dialogPage.dialogs}\n                 messages={props.store.getState().dialogPage.messages}\n                 updateNewMassageBody={onMasssgeChange}\n                 addMassage={addMassage}\n                 newMassageBody={props.store.getState().dialogPage.newMassageBody}/>\n    )\n};\n\ntype MapStatePropsType = {\n    dialogPage: InitialStateType\n}\n\ntype MapDispathPropsType = {\n    addMassage: () => void\n    onMasssgeChange: (body: string) => void\n}\n\n\nlet mapStateToProps = (state: AllAppStateType ): MapStatePropsType => {\n    return {\n        dialogPage: state.dialogPage\n    }\n}\n\nconst mapDispatchToProps = (dispatch: ActionsTypes ) => {\n    return {\n        addMassage: () => {\n            store.dispatch(addMassageActionCreator())\n        },\n        onMasssgeChange: (body: string) => {\n            store.dispatch(updateNewMassageBodyActionCreator(body))\n        }\n\n\n    }\n}\n const superDialogContainer = connect()\n\nexport default DialogsContainer;"]},"metadata":{},"sourceType":"module"}