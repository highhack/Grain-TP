{"ast":null,"code":"import{addMassageActionCreator,updateNewMassageBodyActionCreator}from'../../Redux/dialogReducer';import Dialogs from\"./Dialogs\";import{connect}from'react-redux';// const DialogsContainer = (props: PropsType) => {\n//\n//     let addMassage = () => {\n//         props.store.dispatch(addMassageActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n//     }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n//     let onMasssgeChange = (body: string) => {\n//         props.store.dispatch(updateNewMassageBodyActionCreator(body))                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n//     }\n//     return (\n//         <Dialogs dialogs={props.store.getState().dialogPage.dialogs}\n//                  messages={props.store.getState().dialogPage.messages}\n//                  updateNewMassageBody={onMasssgeChange}\n//                  addMassage={addMassage}\n//                  newMassageBody={props.store.getState().dialogPage.newMassageBody}/>\n//     )\n// };\nvar mapStateToProps=function mapStateToProps(state){return{dialogPage:state.dialogPage};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{addMassage:function addMassage(){dispatch(addMassageActionCreator());},updateNewMassageBody:function updateNewMassageBody(body){dispatch(updateNewMassageBodyActionCreator(body));}};};var DialogsContainer=connect(mapStateToProps,mapDispatchToProps)(Dialogs);export default DialogsContainer;","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Dialogs/DialogsContainer.tsx"],"names":["addMassageActionCreator","updateNewMassageBodyActionCreator","Dialogs","connect","mapStateToProps","state","dialogPage","mapDispatchToProps","dispatch","addMassage","updateNewMassageBody","body","DialogsContainer"],"mappings":"AACA,OACIA,uBADJ,CAGIC,iCAHJ,KAIO,2BAJP,CAKA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CAGA,OAAQC,OAAR,KAAsB,aAAtB,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA,GAAIC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAA+C,CACjE,MAAO,CACHC,UAAU,CAAED,KAAK,CAACC,UADf,CAAP,CAGH,CAJD,CAKA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAA6C,CACpE,MAAO,CACHC,UAAU,CAAE,qBAAM,CACdD,QAAQ,CAACR,uBAAuB,EAAxB,CAAR,CACH,CAHE,CAIHU,oBAAoB,CAAE,8BAACC,IAAD,CAAkB,CACpCH,QAAQ,CAACP,iCAAiC,CAACU,IAAD,CAAlC,CAAR,CACH,CANE,CAAP,CAQH,CATD,CAUA,GAAMC,CAAAA,gBAAgB,CAAGT,OAAO,CAACC,eAAD,CAAkBG,kBAAlB,CAAP,CAA6CL,OAA7C,CAAzB,CAEA,cAAeU,CAAAA,gBAAf","sourcesContent":["import React from 'react';\nimport {\n    addMassageActionCreator,\n    InitialStateType,\n    updateNewMassageBodyActionCreator\n} from '../../Redux/dialogReducer';\nimport Dialogs from \"./Dialogs\";\nimport {Dispatch} from \"redux\";\nimport {AllAppStateType} from \"../../Redux/redux-store\";\nimport {connect} from 'react-redux';\n\n\n// const DialogsContainer = (props: PropsType) => {\n//\n//     let addMassage = () => {\n//         props.store.dispatch(addMassageActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n//     }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n//     let onMasssgeChange = (body: string) => {\n//         props.store.dispatch(updateNewMassageBodyActionCreator(body))                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n//     }\n//     return (\n//         <Dialogs dialogs={props.store.getState().dialogPage.dialogs}\n//                  messages={props.store.getState().dialogPage.messages}\n//                  updateNewMassageBody={onMasssgeChange}\n//                  addMassage={addMassage}\n//                  newMassageBody={props.store.getState().dialogPage.newMassageBody}/>\n//     )\n// };\n\nexport type DialogsPropsType = MapStatePropsType & MapDispathPropsType\n\ntype MapStatePropsType = {\n    dialogPage: InitialStateType\n}\ntype MapDispathPropsType = {\n    addMassage: () => void\n    updateNewMassageBody: (body: string) => void\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        dialogPage: state.dialogPage\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType => {\n    return {\n        addMassage: () => {\n            dispatch(addMassageActionCreator())\n        },\n        updateNewMassageBody: (body: string) => {\n            dispatch(updateNewMassageBodyActionCreator(body))\n        }\n    }\n}\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\n\nexport default DialogsContainer;"]},"metadata":{},"sourceType":"module"}