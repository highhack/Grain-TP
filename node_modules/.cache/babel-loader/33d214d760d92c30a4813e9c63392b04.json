{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Users/UsersContainer.tsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { follow, unfollow, setUsers, setCurrentPage, setUsersTotalCount, toggleIsFetching } from \"../../Redux/usersReducer\";\nimport axios from \"axios\";\nimport Users from \"./Users\";\nimport Preloader from \"../../common/Preloader\";\n\nclass UsersAPIComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onChangeNumber = pageNumber => {\n      this.props.toggleIsFetching(true);\n      this.props.setCurrentPage(pageNumber);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(resolve => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(resolve.data.items); // this.props.setUsersTotalCount(resolve.data.totalCount)\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(resolve => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(resolve.data.items);\n      let totalUsersCount = resolve.data.totalCount;\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 38\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        users: this.props.users,\n        follow: this.props.follow,\n        unfollow: this.props.unfollow,\n        onChangeNumber: this.onChangeNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n}; // const mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType => {\n//     return {\n//         follow: (userID) => {\n//             dispatch(followAC(userID))\n//         },\n//         unfollow: (userID) => {\n//             dispatch(unFollowAC(userID))\n//         },\n//         setUsers: (users) => {\n//             dispatch(setUsersAC(users))\n//         },\n//         setCurrentPage: (pageNumber) => {\n//             dispatch(setCurrentPageAC(pageNumber))\n//         },\n//         setUsersTotalCount: (totalCount) => {\n//             dispatch(setUsersTotalCountAC(totalCount))\n//         },\n//         toggleIsFetching: (isFetching) => {\n//             dispatch(toggleIsFetching(isFetching))\n//         },\n//\n//     }\n//\n// }\n\n\nconst UsersContainer = connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setUsersTotalCount,\n  toggleIsFetching\n})(UsersAPIComponent);\nexport default UsersContainer;","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Users/UsersContainer.tsx"],"names":["React","connect","follow","unfollow","setUsers","setCurrentPage","setUsersTotalCount","toggleIsFetching","axios","Users","Preloader","UsersAPIComponent","Component","onChangeNumber","pageNumber","props","get","pageSize","then","resolve","data","items","componentDidMount","currentPage","totalUsersCount","totalCount","render","isFetching","users","mapStateToProps","state","usersPage","UsersContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport {AllAppStateType} from \"../../Redux/redux-store\";\nimport {\n    follow,\n    unfollow,\n    setUsers,\n    UsersType,\n    setCurrentPage,\n    setUsersTotalCount, toggleIsFetching\n} from \"../../Redux/usersReducer\";\nimport axios from \"axios\";\nimport Users from \"./Users\";\nimport Preloader from \"../../common/Preloader\";\n\nexport type UsersPropsType = MapStatePropsType & MapDispathPropsType\n\ntype MapStatePropsType = {\n    users: Array<UsersType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n}\ntype MapDispathPropsType = {\n    follow: (userID: number) => void\n    unfollow: (userID: number) => void\n    setUsers: (newUsers: Array<UsersType>) => void\n    setCurrentPage: (pageNumber: number) => void\n    setUsersTotalCount: (totalUsersCount: number) => void\n    toggleIsFetching: (isFetching: boolean) => void\n}\n\nclass UsersAPIComponent extends React.Component<UsersPropsType> {\n\n    componentDidMount() {\n        this.props.toggleIsFetching(true)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\n            .then(resolve => {\n                this.props.toggleIsFetching(false)\n                this.props.setUsers(resolve.data.items)\n                let totalUsersCount = resolve.data.totalCount\n            })\n    }\n\n    onChangeNumber = (pageNumber: number): void => {\n        this.props.toggleIsFetching(true)\n        this.props.setCurrentPage(pageNumber);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\n            .then(resolve => {\n                this.props.toggleIsFetching(false)\n                this.props.setUsers(resolve.data.items)\n                // this.props.setUsersTotalCount(resolve.data.totalCount)\n            })\n    }\n\n    render() {\n        return <>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users totalUsersCount={this.props.totalUsersCount}\n                   pageSize={this.props.pageSize}\n                   currentPage={this.props.currentPage}\n                   users={this.props.users}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   onChangeNumber={this.onChangeNumber}/>\n        </>\n    }\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\n\n// const mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType => {\n//     return {\n//         follow: (userID) => {\n//             dispatch(followAC(userID))\n//         },\n//         unfollow: (userID) => {\n//             dispatch(unFollowAC(userID))\n//         },\n//         setUsers: (users) => {\n//             dispatch(setUsersAC(users))\n//         },\n//         setCurrentPage: (pageNumber) => {\n//             dispatch(setCurrentPageAC(pageNumber))\n//         },\n//         setUsersTotalCount: (totalCount) => {\n//             dispatch(setUsersTotalCountAC(totalCount))\n//         },\n//         toggleIsFetching: (isFetching) => {\n//             dispatch(toggleIsFetching(isFetching))\n//         },\n//\n//     }\n//\n// }\n\nconst UsersContainer = connect(mapStateToProps,\n    {\n        follow,\n        unfollow,\n        setUsers,\n        setCurrentPage,\n        setUsersTotalCount,\n        toggleIsFetching,\n    })(UsersAPIComponent)\n\nexport default UsersContainer;"]},"metadata":{},"sourceType":"module"}