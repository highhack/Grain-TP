{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Dialogs/Dialogs.tsx\";\nimport React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport { addMassageActionCreator, updateNewMassageBodyActionCreator } from '../../Redux/dialogReducer';\n\nconst Dialogs = props => {\n  let DialogElements = props.dialogPage.dialogs.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n    name: d.name,\n    id: d.id,\n    img: d.img\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 54\n  }, this));\n  let MessegesElements = props.dialogPage.messages.map(m => /*#__PURE__*/_jsxDEV(Message, {\n    message: m.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 87\n  }, this));\n\n  let addMassage = () => {\n    props.dispatch(addMassageActionCreator()); //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n  }; // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n\n\n  let onMasssgeChange = e => {\n    let body = e.currentTarget.value;\n    props.dispatch(updateNewMassageBodyActionCreator(body)); //функция которая сидит в state и обновляет данные при написании текста textarea\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.dialogs,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.dialogItems,\n      children: DialogElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.messages,\n      children: MessegesElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        onChange: onMasssgeChange,\n        value: props.dialogPage.newMassageBody\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addMassage,\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Dialogs;\nexport default Dialogs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dialogs\");","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Dialogs/Dialogs.tsx"],"names":["React","s","DialogItem","Message","addMassageActionCreator","updateNewMassageBodyActionCreator","Dialogs","props","DialogElements","dialogPage","dialogs","map","d","name","id","img","MessegesElements","messages","m","message","addMassage","dispatch","onMasssgeChange","e","body","currentTarget","value","dialogItems","newMassageBody"],"mappings":";;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,sBAAd;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,SAAQC,uBAAR,EAAiCC,iCAAjC,QAAyE,2BAAzE;;AAMA,MAAMC,OAAO,GAAIC,KAAD,IAAsB;AAElC,MAAIC,cAAc,GAAGD,KAAK,CAACE,UAAN,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA+BC,CAAD,iBACF,QAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,CAAC,CAACC,IAApB;AAA0B,IAAA,EAAE,EAAED,CAAC,CAACE,EAAhC;AAAoC,IAAA,GAAG,EAAEF,CAAC,CAACG;AAA3C;AAAA;AAAA;AAAA;AAAA,UAD5B,CAArB;AAEA,MAAIC,gBAAgB,GAAGT,KAAK,CAACE,UAAN,CAAiBQ,QAAjB,CAA0BN,GAA1B,CAAgCO,CAAD,iBAA4B,QAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,CAAC,CAACC;AAApB;AAAA;AAAA;AAAA;AAAA,UAA3D,CAAvB;;AAEA,MAAIC,UAAU,GAAG,MAAM;AACnBb,IAAAA,KAAK,CAACc,QAAN,CAAejB,uBAAuB,EAAtC,EADmB,CAC0H;AAChJ,GAFD,CANkC,CAQuF;;;AACzH,MAAIkB,eAAe,GAAIC,CAAD,IAAyC;AAC3D,QAAIC,IAAI,GAAGD,CAAC,CAACE,aAAF,CAAgBC,KAA3B;AACAnB,IAAAA,KAAK,CAACc,QAAN,CAAehB,iCAAiC,CAACmB,IAAD,CAAhD,EAF2D,CAEgF;AAC9I,GAHD;;AAIA,sBAEI;AAAK,IAAA,SAAS,EAAEvB,CAAC,CAACS,OAAlB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAGT,CAAC,CAAC0B,WAAnB;AAAA,gBACKnB;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAEP,CAAC,CAACgB,QAAlB;AAAA,gBACKD;AADL;AAAA;AAAA;AAAA;AAAA,YAJJ,eAOI;AAAA,8BACI;AAAU,QAAA,QAAQ,EAAEM,eAApB;AAAsC,QAAA,KAAK,EAAEf,KAAK,CAACE,UAAN,CAAiBmB;AAA9D;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAER,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAgBH,CA7BD;;KAAMd,O;AA+BN,eAAeA,OAAf","sourcesContent":["import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport {ActionsTypes, DialogPageType} from \"../../Redux/redux-store\";\nimport {addMassageActionCreator, updateNewMassageBodyActionCreator} from '../../Redux/dialogReducer';\n\ntype PropsType = {\n    dialogPage: DialogPageType;\n    dispatch: (action: ActionsTypes) => void\n}\nconst Dialogs = (props: PropsType) => {\n\n    let DialogElements = props.dialogPage.dialogs.map( (d: {\n        img: string; name: string; id: number; }) => <DialogItem name={d.name} id={d.id} img={d.img}/>)\n    let MessegesElements = props.dialogPage.messages.map( (m: { message: string }) => <Message message={m.message} />)\n\n    let addMassage = () => {\n        props.dispatch(addMassageActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n    }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n    let onMasssgeChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let body = e.currentTarget.value\n        props.dispatch(updateNewMassageBodyActionCreator(body))                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n    }\n    return (\n\n        <div className={s.dialogs}>\n            <div className={ s.dialogItems}>\n                {DialogElements}\n            </div>\n            <div className={s.messages}>\n                {MessegesElements}\n            </div>\n            <div>\n                <textarea onChange={onMasssgeChange}  value={props.dialogPage.newMassageBody} />\n                <button onClick={addMassage}>send</button>\n            </div>\n        </div>\n\n    )\n};\n\nexport default Dialogs;"]},"metadata":{},"sourceType":"module"}