{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Profil/MyPosts/MyPosts.tsx\";\nimport React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\n\nconst MyPosts = props => {\n  let PostsElements = props.posts.map(p => /*#__PURE__*/_jsxDEV(Post, {\n    message: p.message,\n    likecount: p.likecount\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 46\n  }, this));\n\n  let onAddPost = () => {\n    props.addPost(); //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n  }; // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n\n\n  let onPostChange = e => {\n    let text = e.currentTarget.value;\n    props.updateNewPostText(text); //функция которая сидит в state и обновляет данные при написании текста textarea\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.mypost,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"My posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        onChange: onPostChange,\n        value: props.newPostText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onAddPost,\n        children: \"Add post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), PostsElements]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_c = MyPosts;\nexport default MyPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPosts\");","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Profil/MyPosts/MyPosts.tsx"],"names":["React","s","Post","MyPosts","props","PostsElements","posts","map","p","message","likecount","onAddPost","addPost","onPostChange","e","text","currentTarget","value","updateNewPostText","mypost","newPostText"],"mappings":";;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,sBAAd;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAaA,MAAMC,OAAO,GAAIC,KAAD,IAAsB;AAClC,MAAIC,aAAa,GAAGD,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAgBC,CAAC,iBAAI,QAAC,IAAD;AAAM,IAAA,OAAO,EAAEA,CAAC,CAACC,OAAjB;AAA0B,IAAA,SAAS,EAAED,CAAC,CAACE;AAAvC;AAAA;AAAA;AAAA;AAAA,UAArB,CAApB;;AACA,MAAIC,SAAS,GAAG,MAAM;AAClBP,IAAAA,KAAK,CAACQ,OAAN,GADkB,CAC+F;AACpH,GAFD,CAFkC,CAIuF;;;AACzH,MAAIC,YAAY,GAAIC,CAAD,IAAyC;AACxD,QAAIC,IAAI,GAAGD,CAAC,CAACE,aAAF,CAAgBC,KAA3B;AACAb,IAAAA,KAAK,CAACc,iBAAN,CAAwBH,IAAxB,EAFwD,CAEyD;AACpH,GAHD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAEd,CAAC,CAACkB,MAAlB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,6BACI;AAAU,QAAA,QAAQ,EAAEN,YAApB;AAAkC,QAAA,KAAK,EAAET,KAAK,CAACgB;AAA/C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI;AAAA,6BACI;AAAQ,QAAA,OAAO,EAAET,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALJ,EAQKN,aARL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CArBD;;KAAMF,O;AAuBN,eAAeA,OAAf","sourcesContent":["import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\n\nexport type PostType = {\n    message: string\n    id: number\n    likecount: string\n}\ntype PropsType = {\n    posts: Array<PostType>\n    newPostText: string\n    updateNewPostText: (text: string) => void\n    addPost: () => void\n}\nconst MyPosts = (props: PropsType) => {\n    let PostsElements = props.posts.map(p => <Post message={p.message} likecount={p.likecount}/>)\n    let onAddPost = () => {\n        props.addPost()                                                                                                  //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n    }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let text = e.currentTarget.value\n        props.updateNewPostText(text)                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n    }\n    return (\n        <div className={s.mypost}>\n            <h3>My posts</h3>\n            <div>\n                <textarea onChange={onPostChange} value={props.newPostText}/>\n            </div>\n            <div>\n                <button onClick={onAddPost}>Add post</button>\n            </div>\n            {PostsElements}\n        </div>\n    )\n};\n\nexport default MyPosts;"]},"metadata":{},"sourceType":"module"}