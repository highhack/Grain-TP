{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Profil/MyPosts/MyPostsContainer.tsx\";\nimport React from 'react';\nimport store from \"../../../Redux/redux-store\";\nimport { addPostActionCreator, updateNewPostTextActionCreator } from \"../../../Redux/profilReducer\";\nimport MyPosts from \"./MyPosts\";\n\nconst MyPostsContainer = props => {\n  let state = store.getState();\n\n  let addPost = () => {\n    props.dispatch(addPostActionCreator()); //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n  }; // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n\n\n  let onPostChange = text => {\n    let action = updateNewPostTextActionCreator(text);\n    props.dispatch(action); //функция которая сидит в state и обновляет данные при написании текста textarea\n  };\n\n  return /*#__PURE__*/_jsxDEV(MyPosts, {\n    updateNewPostText: onPostChange,\n    addPost: addPost,\n    posts: props.posts,\n    newPostText: props.newPostText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 8\n  }, this);\n};\n\n_c = MyPostsContainer;\nexport default MyPostsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPostsContainer\");","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Profil/MyPosts/MyPostsContainer.tsx"],"names":["React","store","addPostActionCreator","updateNewPostTextActionCreator","MyPosts","MyPostsContainer","props","state","getState","addPost","dispatch","onPostChange","text","action","posts","newPostText"],"mappings":";;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,OAAOC,KAAP,MAA4C,4BAA5C;AACA,SAAQC,oBAAR,EAA8BC,8BAA9B,QAAmE,8BAAnE;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAUA,MAAMC,gBAAgB,GAAIC,KAAD,IAAsB;AAC3C,MAAIC,KAAK,GAAGN,KAAK,CAACO,QAAN,EAAZ;;AAEA,MAAIC,OAAO,GAAG,MAAM;AAChBH,IAAAA,KAAK,CAACI,QAAN,CAAeR,oBAAoB,EAAnC,EADgB,CAC0H;AAC7I,GAFD,CAH2C,CAK8E;;;AACzH,MAAIS,YAAY,GAAIC,IAAD,IAAkB;AACjC,QAAIC,MAAM,GAAGV,8BAA8B,CAACS,IAAD,CAA3C;AACAN,IAAAA,KAAK,CAACI,QAAN,CAAeG,MAAf,EAFiC,CAEyE;AAC7G,GAHD;;AAKA,sBACG,QAAC,OAAD;AAAS,IAAA,iBAAiB,EAAEF,YAA5B;AAA0C,IAAA,OAAO,EAAEF,OAAnD;AAA4D,IAAA,KAAK,EAAEH,KAAK,CAACQ,KAAzE;AAAgF,IAAA,WAAW,EAAER,KAAK,CAACS;AAAnG;AAAA;AAAA;AAAA;AAAA,UADH;AAGH,CAdD;;KAAMV,gB;AAgBN,eAAeA,gBAAf","sourcesContent":["import React, {ChangeEvent} from 'react';\nimport store, {ActionsTypes, PostType} from \"../../../Redux/redux-store\";\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../Redux/profilReducer\";\nimport MyPosts from \"./MyPosts\";\n\n\ntype PropsType = {\n    posts: Array<PostType>\n    dispatch: (action: ActionsTypes) => void\n    newPostText: string\n}\n\n\nconst MyPostsContainer = (props: PropsType) => {\n    let state = store.getState()\n\n    let addPost = () => {\n        props.dispatch(addPostActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n    }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n    let onPostChange = (text: string) => {\n        let action = updateNewPostTextActionCreator(text)\n        props.dispatch(action)                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n    }\n\n    return (\n       <MyPosts updateNewPostText={onPostChange} addPost={addPost} posts={props.posts} newPostText={props.newPostText} />\n    )\n};\n\nexport default MyPostsContainer;"]},"metadata":{},"sourceType":"module"}