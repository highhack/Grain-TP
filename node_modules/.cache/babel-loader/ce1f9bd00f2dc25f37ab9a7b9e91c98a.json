{"ast":null,"code":"import{addPostActionCreator,updateNewPostTextActionCreator}from\"../../../Redux/profilReducer\";import{connect}from\"react-redux\";import MyPosts from\"./MyPosts\";// type PropsType = {\n//     store: Store\n// }\n//\n//\n// const MyPostsContainer = (props: PropsType) => {\n//     let state = props.store.getState()\n//\n//     let addPost = () => {\n//         props.store.dispatch(addPostActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n//     }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n//     let onPostChange = (text: string) => {\n//         let action = updateNewPostTextActionCreator(text)\n//         props.store.dispatch(action)                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n//     }\n//\n//     return (\n//        <MyPosts updateNewPostText={onPostChange}\n//                 addPost={addPost}\n//                 posts={state.profilPage.posts}\n//                 newPostText={state.profilPage.newPostText} />\n//     )\n// };\nvar mapStateToProps=function mapStateToProps(state){return{profilPage:state.profilPage};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{addPost:function addPost(){dispatch(addPostActionCreator());},updateNewPostText:function updateNewPostText(text){dispatch(updateNewPostTextActionCreator(text));}};};var MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts);export default MyPostsContainer;","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Profil/MyPosts/MyPostsContainer.tsx"],"names":["addPostActionCreator","updateNewPostTextActionCreator","connect","MyPosts","mapStateToProps","state","profilPage","mapDispatchToProps","dispatch","addPost","updateNewPostText","text","MyPostsContainer"],"mappings":"AAEA,OACIA,oBADJ,CAGIC,8BAHJ,KAIO,8BAJP,CAOA,OAAQC,OAAR,KAAsB,aAAtB,CAEA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA,GAAIC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAgD,CAClE,MAAO,CACHC,UAAU,CAAED,KAAK,CAACC,UADf,CAAP,CAGH,CAJD,CAKA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAA4C,CACnE,MAAO,CACHC,OAAO,CAAE,kBAAM,CACXD,QAAQ,CAACR,oBAAoB,EAArB,CAAR,CACH,CAHE,CAIHU,iBAAiB,CAAE,2BAACC,IAAD,CAAkB,CACjCH,QAAQ,CAACP,8BAA8B,CAACU,IAAD,CAA/B,CAAR,CACH,CANE,CAAP,CAQH,CATD,CAUA,GAAMC,CAAAA,gBAAgB,CAAGV,OAAO,CAACE,eAAD,CAAkBG,kBAAlB,CAAP,CAA6CJ,OAA7C,CAAzB,CAIA,cAAeS,CAAAA,gBAAf","sourcesContent":["import React from 'react';\n\nimport {\n    addPostActionCreator,\n    InitialStatePostType,\n    updateNewPostTextActionCreator\n} from \"../../../Redux/profilReducer\";\nimport {Dispatch} from \"redux\";\nimport {AllAppStateType} from \"../../../Redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport Dialogs from \"../../Dialogs/Dialogs\";\nimport MyPosts from \"./MyPosts\";\n\n\n// type PropsType = {\n//     store: Store\n// }\n//\n//\n// const MyPostsContainer = (props: PropsType) => {\n//     let state = props.store.getState()\n//\n//     let addPost = () => {\n//         props.store.dispatch(addPostActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n//     }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n//     let onPostChange = (text: string) => {\n//         let action = updateNewPostTextActionCreator(text)\n//         props.store.dispatch(action)                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n//     }\n//\n//     return (\n//        <MyPosts updateNewPostText={onPostChange}\n//                 addPost={addPost}\n//                 posts={state.profilPage.posts}\n//                 newPostText={state.profilPage.newPostText} />\n//     )\n// };\n\nexport type ProfilPropsType = MapStatePropsType & MapDispathPropsType\n\ntype MapStatePropsType = {\n    profilPage: InitialStatePostType\n\n}\n\ntype MapDispathPropsType = {\n    addPost: () => void\n    updateNewPostText: (text: string) => void\n}\n\n\nlet mapStateToProps = (state: AllAppStateType ): MapStatePropsType => {\n    return {\n        profilPage: state.profilPage\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType=> {\n    return {\n        addPost: () => {\n            dispatch(addPostActionCreator())\n        },\n        updateNewPostText: (text: string) => {\n            dispatch(updateNewPostTextActionCreator(text))\n        }\n    }\n}\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n\n\nexport default MyPostsContainer;"]},"metadata":{},"sourceType":"module"}