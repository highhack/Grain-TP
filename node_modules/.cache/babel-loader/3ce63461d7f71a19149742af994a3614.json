{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Profil/MyPosts/MyPosts.tsx\";\nimport React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\n\nconst MyPosts = props => {\n  let PostsElements = props.post.map(p => /*#__PURE__*/_jsxDEV(Post, {\n    message: p.message,\n    likecount: p.likecount\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 45\n  }, this));\n  let postMessageRef = /*#__PURE__*/React.createRef();\n\n  let addPost = () => {\n    props.addPost(); //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n  }; // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n\n\n  let onPostChange = () => {\n    if (postMessageRef.current) {\n      let text = postMessageRef.current.value;\n      props.updateNewPost(text); //функция которая сидит в state и обновляет данные при написании текста textarea\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.mypost,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"My posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        onChange: onPostChange,\n        ref: postMessageRef,\n        value: props.newPostText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addPost,\n        children: \"Add post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), PostsElements]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_c = MyPosts;\nexport default MyPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPosts\");","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Profil/MyPosts/MyPosts.tsx"],"names":["React","s","Post","MyPosts","props","PostsElements","post","map","p","message","likecount","postMessageRef","createRef","addPost","onPostChange","current","text","value","updateNewPost","mypost","newPostText"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,sBAAd;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AASA,MAAMC,OAAO,GAAIC,KAAD,IAAsB;AAGlC,MAAIC,aAAa,GAAGD,KAAK,CAACE,IAAN,CAAWC,GAAX,CAAeC,CAAC,iBAAI,QAAC,IAAD;AAAM,IAAA,OAAO,EAAEA,CAAC,CAACC,OAAjB;AAA0B,IAAA,SAAS,EAAED,CAAC,CAACE;AAAvC;AAAA;AAAA;AAAA;AAAA,UAApB,CAApB;AAEA,MAAIC,cAAc,gBAAGX,KAAK,CAACY,SAAN,EAArB;;AAEA,MAAIC,OAAO,GAAG,MAAM;AAChBT,IAAAA,KAAK,CAACS,OAAN,GADgB,CACoG;AACvH,GAFD,CAPkC,CASuF;;;AAGzH,MAAIC,YAAY,GAAG,MAAM;AACrB,QAAIH,cAAc,CAACI,OAAnB,EAA4B;AACxB,UAAIC,IAAI,GAAGL,cAAc,CAACI,OAAf,CAAuBE,KAAlC;AACAb,MAAAA,KAAK,CAACc,aAAN,CAAoBF,IAApB,EAFwB,CAEyF;AACpH;AACJ,GALD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAEf,CAAC,CAACkB,MAAlB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,6BACI;AAAU,QAAA,QAAQ,EAAEL,YAApB;AAAkC,QAAA,GAAG,EAAEH,cAAvC;AAAuD,QAAA,KAAK,EAAEP,KAAK,CAACgB;AAApE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI;AAAA,6BACI;AAAQ,QAAA,OAAO,EAAEP,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALJ,EAQKR,aARL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CA/BD;;KAAMF,O;AAiCN,eAAeA,OAAf","sourcesContent":["import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {PostType, ProfilPageType} from \"../../../Redux/State\";\n\ntype PropsType = {\n    post: Array<PostType>\n    addPost: () => void\n    updateNewPost: (text: string) => void\n    newPostText: string\n}\nconst MyPosts = (props: PropsType) => {\n\n\n    let PostsElements = props.post.map(p => <Post message={p.message} likecount={p.likecount}/>)\n\n    let postMessageRef = React.createRef<HTMLTextAreaElement>();\n\n    let addPost = () => {\n        props.addPost()                                                                                                     //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n    }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n\n\n    let onPostChange = () => {\n        if (postMessageRef.current) {\n            let text = postMessageRef.current.value;\n            props.updateNewPost(text)                                                                                        //функция которая сидит в state и обновляет данные при написании текста textarea\n        }\n    }\n\n    return (\n        <div className={s.mypost}>\n            <h3>My posts</h3>\n            <div>\n                <textarea onChange={onPostChange} ref={postMessageRef} value={props.newPostText}/>\n            </div>\n            <div>\n                <button onClick={addPost}>Add post</button>\n            </div>\n            {PostsElements}\n        </div>\n    )\n};\n\nexport default MyPosts;"]},"metadata":{},"sourceType":"module"}