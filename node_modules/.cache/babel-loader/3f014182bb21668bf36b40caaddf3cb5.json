{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Dialogs/DialogsContainer.tsx\";\nimport React from 'react';\nimport { addMassageActionCreator, updateNewMassageBodyActionCreator } from '../../Redux/dialogReducer';\nimport Dialogs from \"./Dialogs\";\n\nconst DialogsContainer = props => {\n  let addMassage = () => {\n    props.store.dispatch(addMassageActionCreator()); //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n  }; // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n\n\n  let onMasssgeChange = body => {\n    props.store.dispatch(updateNewMassageBodyActionCreator(body)); //функция которая сидит в state и обновляет данные при написании текста textarea\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialogs, {\n    dialogs: props.store.getState().dialogPage.dialogs,\n    messages: props.store.getState().dialogPage.messages,\n    updateNewMassageBody: onMasssgeChange,\n    addMassage: addMassage,\n    newMassageBody: props.store.getState().dialogPage.newMassageBody\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}; // let mapStateToProps = (state: ) => {\n//     return {\n//         dialogPage: state.dialogPage\n//     }\n// }\n\n\n_c = DialogsContainer;\nexport default DialogsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DialogsContainer\");","map":{"version":3,"sources":["/home/gerich/Documents/it-kamasutra/TP-way-of-samuray/tp-samuray/src/components/Dialogs/DialogsContainer.tsx"],"names":["React","addMassageActionCreator","updateNewMassageBodyActionCreator","Dialogs","DialogsContainer","props","addMassage","store","dispatch","onMasssgeChange","body","getState","dialogPage","dialogs","messages","newMassageBody"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,uBAAR,EAAiCC,iCAAjC,QAAyE,2BAAzE;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAMA,MAAMC,gBAAgB,GAAIC,KAAD,IAAsB;AAE3C,MAAIC,UAAU,GAAG,MAAM;AACnBD,IAAAA,KAAK,CAACE,KAAN,CAAYC,QAAZ,CAAqBP,uBAAuB,EAA5C,EADmB,CACgI;AACtJ,GAFD,CAF2C,CAI8E;;;AACzH,MAAIQ,eAAe,GAAIC,IAAD,IAAkB;AACpCL,IAAAA,KAAK,CAACE,KAAN,CAAYC,QAAZ,CAAqBN,iCAAiC,CAACQ,IAAD,CAAtD,EADoC,CAC6G;AACpJ,GAFD;;AAGA,sBACI,QAAC,OAAD;AAAS,IAAA,OAAO,EAAEL,KAAK,CAACE,KAAN,CAAYI,QAAZ,GAAuBC,UAAvB,CAAkCC,OAApD;AACS,IAAA,QAAQ,EAAER,KAAK,CAACE,KAAN,CAAYI,QAAZ,GAAuBC,UAAvB,CAAkCE,QADrD;AAES,IAAA,oBAAoB,EAAEL,eAF/B;AAGS,IAAA,UAAU,EAAEH,UAHrB;AAIS,IAAA,cAAc,EAAED,KAAK,CAACE,KAAN,CAAYI,QAAZ,GAAuBC,UAAvB,CAAkCG;AAJ3D;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAfD,C,CAiBA;AACA;AACA;AACA;AACA;;;KArBMX,gB;AAuBN,eAAeA,gBAAf","sourcesContent":["import React from 'react';\nimport {addMassageActionCreator, updateNewMassageBodyActionCreator} from '../../Redux/dialogReducer';\nimport Dialogs from \"./Dialogs\";\nimport {Store} from \"redux\";\n\ntype PropsType = {\n    store: Store\n}\nconst DialogsContainer = (props: PropsType) => {\n\n    let addMassage = () => {\n        props.store.dispatch(addMassageActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n    }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n    let onMasssgeChange = (body: string) => {\n        props.store.dispatch(updateNewMassageBodyActionCreator(body))                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n    }\n    return (\n        <Dialogs dialogs={props.store.getState().dialogPage.dialogs}\n                 messages={props.store.getState().dialogPage.messages}\n                 updateNewMassageBody={onMasssgeChange}\n                 addMassage={addMassage}\n                 newMassageBody={props.store.getState().dialogPage.newMassageBody}/>\n    )\n};\n\n// let mapStateToProps = (state: ) => {\n//     return {\n//         dialogPage: state.dialogPage\n//     }\n// }\n\nexport default DialogsContainer;"]},"metadata":{},"sourceType":"module"}