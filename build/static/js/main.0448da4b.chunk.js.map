{"version":3,"sources":["components/Nav/Nav.module.css","components/Dialogs/Dialogs.module.css","components/Sidebar/Sidebar.module.css","components/Profil/ProfilInfo/ProfilInfo.module.css","components/Header/Header.module.css","components/Profil/MyPosts/MyPosts.module.css","components/Profil/MyPosts/Post/Post.module.css","components/Users/Users.module.css","components/Header/Header.tsx","components/Sidebar/SidebarData/SidebarData.tsx","components/Sidebar/Sidebar.tsx","components/Sidebar/SidebarContainer.tsx","components/Nav/Nav.tsx","components/Profil/ProfilInfo/ProfilInfo.tsx","Redux/profilReducer.ts","components/Profil/MyPosts/Post/Post.tsx","components/Profil/MyPosts/MyPosts.tsx","components/Profil/MyPosts/MyPostsContainer.tsx","components/Profil/Profil.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","Redux/dialogReducer.ts","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Sidebar/Friends.tsx","components/Users/Users.tsx","Redux/usersReducer.ts","components/Users/UsersContainer.tsx","App.tsx","reportWebVitals.ts","Redux/sidebarReducer.ts","Redux/redux-store.ts","index.tsx"],"names":["module","exports","Header","className","s","header","src","alt","SidebarData","props","friend","img","name","Sidebar","FriendsElement","sidebar","friends","map","p","id","SidebarContainer","connect","state","Nav","nav","item","to","activeClassName","active","ProfilInfo","upimage","descriptionBlock","ADD_POST","UPDATE_NEW_POST","initialState","posts","message","likecount","newPostText","profilReducer","action","type","text","Post","itemm","MyPosts","PostsElements","profilPage","mypost","onChange","e","currentTarget","value","updateNewPostText","onClick","addPost","MyPostsContainer","dispatch","updateNewPostTextActionCreator","Profil","content","News","Music","Settings","UPDATE_NEW_MASSAGE_BODY","ADD_MASSAGE","dialogs","messages","newMassageBody","dialogReducer","body","DialogItem","dialog","Message","Dialogs","DialogElements","dialogPage","d","MessegesElements","m","dialogItems","updateNewMassageBody","addMassage","DialogsContainer","Friends","Users","users","length","setUsers","u","photoUrl","followed","follow","unfollow","fullName","status","location","country","city","FOLLOW","UNFOLLOW","SET_USERS","usersReducer","userID","newUsers","UsersContainer","usersPage","followAC","unFollowAC","setUsersAC","App","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","rootReducer","combineReducers","store","createStore","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById","getState","subscribe"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,kBAAkB,OAAS,sB,sBCA3ED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,0BAA0B,YAAc,6BAA6B,OAAS,0B,oBCA9ID,EAAOC,QAAU,CAAC,IAAM,uB,uBCAxBD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,iBAAmB,uC,iBCA3ED,EAAOC,QAAU,CAAC,OAAS,yB,mCCA3BD,EAAOC,QAAU,CAAC,OAAS,0B,gBCA3BD,EAAOC,QAAU,CAAC,MAAQ,sB,gBCA1BD,EAAOC,QAAU,CAAC,IAAM,qB,mJCUTC,EARA,WACX,OACI,wBAAQC,UAAWC,IAAEC,OAArB,SACA,qBAAKC,IAAI,mGAAmGC,IAAM,gB,gDCM3GC,EARK,SAACC,GACrB,OACA,sBAAKN,UAAWC,IAAEM,OAAlB,UACI,qBAAKP,UAAWC,IAAEO,IAAKL,IAAKG,EAAME,MAClC,8BAAMF,EAAMG,WCWDC,EAXQ,SAACJ,GAEpB,IAAIK,EAAiBL,EAAMM,QAAQC,QAAQC,KAAI,SAACC,GAAD,OAAgD,cAAC,EAAD,CAAaC,GAAID,EAAEC,GAAIP,KAAMM,EAAEN,KAAMD,IAAKO,EAAEP,SAE3I,OACI,qBAAKR,UAAWC,IAAEW,QAAlB,SACKD,KCIEM,EAFUC,aALH,SAACC,GACnB,MAAO,CACHP,QAASO,EAAMP,WAGEM,CAAyBR,GCkBnCU,EA7BH,WACR,OACI,sBAAKpB,UAAWC,IAAEoB,IAAlB,UACI,qBAAKrB,UAAWC,IAAEqB,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,UAAUC,gBAAiBvB,IAAEwB,OAAzC,uBAEJ,qBAAKzB,UAAWC,IAAEqB,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBvB,IAAEwB,OAA1C,wBAEJ,qBAAKzB,UAAWC,IAAEqB,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,QAAQC,gBAAiBvB,IAAEwB,OAAvC,oBAEJ,qBAAKzB,UAAWC,IAAEqB,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBvB,IAAEwB,OAAxC,qBAEJ,qBAAKzB,UAAWC,IAAEqB,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBvB,IAAEwB,OAA3C,wBAEJ,qBAAKzB,UAAWC,IAAEqB,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBvB,IAAEwB,OAAxC,qBAEJ,gCACI,cAAC,IAAD,CAASF,GAAG,WAAWC,gBAAiBvB,IAAEwB,OAA1C,SAAkD,2CAClD,cAAC,EAAD,W,kCCTDC,EAhBI,WACf,OACI,gCACI,8BACI,qBAAKV,GAAIf,IAAE0B,QAASxB,IAAI,oGAE5B,sBAAKH,UAAaC,IAAE2B,iBAApB,UACA,8BACI,qBAAKzB,IAAI,2EAFb,yB,eCRN0B,EAAW,WACXC,EAAkB,kBAapBC,EAAqC,CACrCC,MAAO,CACH,CAACC,QAAS,mBAAoBjB,GAAI,EAAGkB,UAAW,MAChD,CAACD,QAAS,qBAAsBjB,GAAI,EAAGkB,UAAW,MAClD,CAACD,QAAS,YAAajB,GAAI,EAAGkB,UAAW,OAE7CC,YAAa,gBA6BFC,EAzBO,WAA4F,IAA3FjB,EAA0F,uDAA5DY,EAAcM,EAA8C,uCAC7G,OAAQA,EAAOC,MACX,KAAKT,EACD,OAAO,2BACAV,GADP,IAEIgB,YAAa,GACbH,MAAM,GAAD,mBAAMb,EAAMa,OAAZ,CAAmB,CAAChB,GAAI,EAAGiB,QAASd,EAAMgB,YAAaD,UAAW,SAE/E,KAAKJ,EACD,OAAO,2BACAX,GADP,IAEIgB,YAAaE,EAAOE,OAE5B,QACI,OAAOpB,I,kCChBJqB,EAdF,SAAClC,GACV,OAEI,sBAAKN,UAAWC,IAAEwC,MAAlB,UACI,qBAAMtC,IAAI,qEACPG,EAAM2B,QACT,gCACI,0CADJ,IACyB3B,EAAM4B,iBCuB5BQ,EAvBC,SAACpC,GACb,IAAIqC,EAAgBrC,EAAMsC,WAAWZ,MAAMlB,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMkB,QAASlB,EAAEkB,QAASC,UAAWnB,EAAEmB,eAQ3F,OACI,sBAAKlC,UAAWC,IAAE4C,OAAlB,UACI,0CACA,8BACI,0BAAUC,SARH,SAACC,GAChB,IAAIR,EAAOQ,EAAEC,cAAcC,MAC3B3C,EAAM4C,kBAAkBX,IAMkBU,MAAO3C,EAAMsC,WAAWT,gBAE9D,8BACI,wBAAQgB,QAdJ,WACZ7C,EAAM8C,WAaE,wBAEHT,MCoCEU,EAJUnC,aAfH,SAACC,GACnB,MAAO,CACHyB,WAAYzB,EAAMyB,eAGC,SAACU,GACxB,MAAO,CACHF,QAAS,WACLE,EHhB+B,CAAChB,KAAMT,KGkB1CqB,kBAAmB,SAACX,GAChBe,EHlBkC,SAACf,GAAD,MACzC,CAACD,KAAMR,EAAiBS,QGiBRgB,CAA+BhB,QAI3BrB,CAA6CwB,GChDvDc,EATA,WACX,OACI,sBAAKxD,UAAWC,IAAEwD,QAAlB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QCAGC,EATF,WACT,OACJ,wCCOeC,EATD,WACV,OACJ,yCCOeC,EATE,WACb,OACJ,4CCHMC,EAA0B,0BAC1BC,EAAc,cAQhB/B,EAAiC,CACjCgC,QAAS,CACL,CACItD,KAAM,OACNO,GAAI,EACJR,IAAK,4FAET,CACIC,KAAM,SACNO,GAAI,EACJR,IAAK,4FAET,CACIC,KAAM,OACNO,GAAI,EACJR,IAAK,4FAET,CACIC,KAAM,QACNO,GAAI,EACJR,IAAK,4FAET,CACIC,KAAM,OACNO,GAAI,EACJR,IAAK,4FAET,CACIC,KAAM,OACNO,GAAI,EACJR,IAAK,4FAET,CACIC,KAAM,OACNO,GAAI,EACJR,IAAK,6FAGbwD,SAAU,CACN,CAAC/B,QAAS,KAAMjB,GAAI,GACpB,CAACiB,QAAS,eAAgBjB,GAAI,GAC9B,CAACiB,QAAS,QAASjB,GAAI,GACvB,CAACiB,QAAS,KAAMjB,GAAI,GACpB,CAACiB,QAAS,eAAgBjB,GAAI,GAC9B,CAACiB,QAAS,WAAYjB,GAAI,GAC1B,CAACiB,QAAS,aAAcjB,GAAI,IAEhCiD,eAAgB,cA6BLC,EA1BO,WAAoF,IAAnF/C,EAAkF,uDAAxDY,EAAcM,EAA0C,uCACrG,OAAQA,EAAOC,MACX,KAAKuB,EACD,OAAO,2BACA1C,GADP,IAEI8C,eAAgB5B,EAAO8B,OAE/B,KAAKL,EACD,OAAO,2BACA3C,GADP,IAEI8C,eAAgB,GAChBD,SAAS,GAAD,mBAAM7C,EAAM6C,UAAZ,CAAsB,CAAC/B,QAASd,EAAM8C,eAAgBjD,GAAI,OAE1E,QACI,OAAOG,I,iBCxDJiD,EAVI,SAAC9D,GAChB,OACI,sBAAKN,UAAWC,IAAEoE,OAAlB,UACI,qBAAKlE,IAAKG,EAAME,MAChB,eAAC,IAAD,CAASe,GAAI,YAAcjB,EAAMU,GAAjC,cAAuCV,EAAMG,KAA7C,WCHG6D,EAPC,SAAChE,GACb,OACI,qBAAKN,UAAWC,IAAEgC,QAAlB,SAA4B3B,EAAM2B,WCiC3BsC,EAhCC,SAACjE,GAEb,IAAIkE,EAAiBlE,EAAMmE,WAAWV,QAAQjD,KAAI,SAAC4D,GAAD,OAE5C,cAAC,EAAD,CAAYjE,KAAMiE,EAAEjE,KAAMO,GAAI0D,EAAE1D,GAAIR,IAAKkE,EAAElE,SAC7CmE,EAAmBrE,EAAMmE,WAAWT,SAASlD,KAAI,SAAC8D,GAAD,OAA4B,cAAC,EAAD,CAAS3C,QAAS2C,EAAE3C,aAUrG,OACI,sBAAKjC,UAAWC,IAAE8D,QAAlB,UACI,qBAAK/D,UAAWC,IAAE4E,YAAlB,SACKL,IAEL,qBAAKxE,UAAWC,IAAE+D,SAAlB,SACKW,IAEL,gCACI,0BAAU7B,SAfA,SAACC,GACnB,IAAIoB,EAAOpB,EAAEC,cAAcC,MAC3B3C,EAAMwE,qBAAqBX,IAakBlB,MAAO3C,EAAMmE,WAAWR,iBAC7D,wBAAQd,QAnBC,WACjB7C,EAAMyE,cAkBE,yBCwBDC,EAFU9D,aAfH,SAACC,GACnB,MAAO,CACHsD,WAAYtD,EAAMsD,eAGC,SAACnB,GACxB,MAAO,CACHyB,WAAY,WACRzB,EJiCkC,CAAChB,KAAMwB,KI/B7CgB,qBAAsB,SAACX,GACnBb,EJgCP,CAAChB,KAAMuB,EAAyBM,KIhCkBA,QAI9BjD,CAA6CqD,GCzCvDU,EATC,WACZ,OACI,2C,kBCoCOC,GAnCD,SAAC5E,GAIX,OAH2B,IAAvBA,EAAM6E,MAAMC,QACZ9E,EAAM+E,SAAS/E,EAAM6E,OAGrB,8BACK7E,EAAM6E,MAAMrE,KAAI,SAAAwE,GAAC,OACd,gCACA,iCACI,8BACI,qBAAMnF,IAAKmF,EAAEC,SAAUvF,UAAWC,KAAEO,QAExC,8BACK8E,EAAEE,SACG,wBAAQrC,QAAS,WAAO7C,EAAMmF,OAAOH,EAAEtE,KAAvC,oBACA,wBAAQmC,QAAS,WAAO7C,EAAMoF,SAASJ,EAAEtE,KAAzC,2BAIV,iCACA,iCACI,8BAAMsE,EAAEK,WACR,8BAAML,EAAEM,YAEZ,iCACI,8BAAMN,EAAEO,SAASC,UACjB,8BAAMR,EAAEO,SAASE,eAnBfT,EAAEtE,UCZtBgF,GAAS,SACTC,GAAW,WACXC,GAAY,YAednE,GAAsC,CAACoD,MAAM,CACzC,CAACnE,GAAI,EAAGwE,UAAU,EAAOG,SAAU,OAAQC,OAAQ,cAAeC,SAAU,CAACE,KAAM,QAASD,QAAS,WAAWP,SAAU,gFAC1H,CAACvE,GAAI,EAAGwE,UAAU,EAAQG,SAAU,OAAQC,OAAQ,QAASC,SAAU,CAACE,KAAM,OAAQD,QAAS,WAAWP,SAAU,gFACpH,CAACvE,GAAI,EAAGwE,UAAU,EAAOG,SAAU,QAASC,OAAQ,cAAeC,SAAU,CAACE,KAAM,OAAQD,QAAS,WAAWP,SAAU,gFAC1H,CAACvE,GAAI,EAAGwE,UAAU,EAAQG,SAAU,MAAOC,OAAQ,YAAaC,SAAU,CAACE,KAAM,SAAUD,QAAS,UAAUP,SAAU,gFACxH,CAACvE,GAAI,EAAGwE,UAAU,EAAOG,SAAU,QAASC,OAAQ,gBAAiBC,SAAU,CAACE,KAAM,SAAUD,QAAS,UAAUP,SAAU,kFAyCtHY,GApCM,WAA8F,IAA7FhF,EAA4F,uDAA7DY,GAAcM,EAA+C,uCAC9G,OAAQA,EAAOC,MACX,KAAK0D,GACD,OAAO,2BACA7E,GADP,IAEIgE,MAAOhE,EAAMgE,MAAMrE,KAAI,SAAAwE,GACnB,OAAIA,EAAEtE,KAAOqB,EAAO+D,OACT,2BAAId,GAAX,IAAcE,UAAU,IAErBF,OAGnB,KAAKW,GACD,OAAO,2BACA9E,GADP,IAEIgE,MAAOhE,EAAMgE,MAAMrE,KAAI,SAAAwE,GACnB,OAAIA,EAAEtE,KAAOqB,EAAO+D,OACT,2BAAId,GAAX,IAAcE,UAAU,IACnBF,OAGrB,KAAKY,GACD,OAAO,2BAAI/E,GAAX,IAAkBgE,MAAM,GAAD,mBAAOhE,EAAMgE,OAAb,YAAuB9C,EAAOgE,aACzD,QACI,OAAOlF,ICdJmF,GAFQpF,aAnBD,SAACC,GACnB,MAAO,CACHgE,MAAOhE,EAAMoF,UAAUpB,UAGJ,SAAC7B,GACxB,MAAO,CACHmC,OAAQ,SAACW,GACL9C,ED+BY,SAAC8C,GAAD,MAAqB,CAAC9D,KAAM0D,GAAQI,UC/BvCI,CAASJ,KAEtBV,SAAU,SAACU,GACP9C,ED6Bc,SAAC8C,GAAD,MAAqB,CAAC9D,KAAM2D,GAAUG,UC7B3CK,CAAWL,KAExBf,SAAU,SAACgB,GACP/C,ED2Bc,SAAC+C,GAAD,MAAiC,CAAC/D,KAAM4D,GAAWG,YC3BxDK,CAAWL,QAKTnF,CAA6CgE,ICJrDyB,GAlBO,WAClB,OACI,sBAAK3G,UAAU,cAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,sBAAKA,UAAU,sBAAf,UACI,cAAC,IAAD,CAAO4G,KAAK,UAAUC,OAAQ,kBAAM,cAAC,EAAD,OACpC,cAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,cAAC,EAAD,OACrC,cAAC,IAAD,CAAOD,KAAK,QAAQC,OAAQ,kBAAM,cAAC,EAAD,OAClC,cAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,EAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,YAAYC,OAAQ,kBAAM,cAAC,EAAD,OACtC,cAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,cAAC,EAAD,cCbtCC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,oBCCVhF,GAA4B,CACxBlB,QAAS,CACL,CAACJ,KAAM,OAAQO,GAAI,EAAGR,IAAK,4EAC3B,CAACC,KAAM,OAAQO,GAAI,EAAGR,IAAK,4EAC3B,CAACC,KAAM,OAAQO,GAAI,EAAGR,IAAK,8EASxB+G,GALQ,WAAwC,IAAvCpG,EAAsC,uDAA9BY,GAE5B,OAAOZ,G,SCFEqG,GAAcC,aAAgB,CACvChD,WAAYP,EACZtB,WAAYR,EACZxB,QAAS2G,GACThB,UAAWJ,KAICuB,GAFGC,aAAYH,ICbzBI,GAAqB,SAACzG,GACxB0G,KAAShB,OACL,eAAC,IAAMiB,WAAP,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAUJ,MAAOA,GAAjB,SACA,cAAC,GAAD,QAHR,OAQqBK,SAASC,eAAe,UAErDJ,GAAmBF,GAAMO,YACzBP,GAAMQ,WAAU,WACAR,GAAMO,WAClBL,QAKJd,O","file":"static/js/main.0448da4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3gICw\",\"item\":\"Nav_item__96rLj\",\"active\":\"Nav_active__XSt-p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"messages\":\"Dialogs_messages__1w_Up\",\"dialogItems\":\"Dialogs_dialogItems__3flRc\",\"active\":\"Dialogs_active__2sQhs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Sidebar_img__3-mF3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"upimage\":\"ProfilInfo_upimage__3naf_\",\"descriptionBlock\":\"ProfilInfo_descriptionBlock__1fw3e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mypost\":\"MyPosts_mypost__p1637\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemm\":\"Post_itemm__3sWzg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Users_img__3OuDf\"};","import React from 'react';\nimport s from './Header.module.css';\n\nconst Header = () => {\n    return (\n        <header className={s.header}>\n        <img src='https://img1.pnghut.com/24/13/23/GCM7vZjvN9/grass-leaf-ecosystem-environmental-science-green.jpg' alt = 'backfone'/>\n      </header>\n    )\n}\n\nexport default Header","import s from \"../Sidebar.module.css\";\nimport React from \"react\";\nimport {FriendType} from \"../../../Redux/Store\";\n\nconst SidebarData = (props: FriendType) => {\nreturn (\n<div className={s.friend}>\n    <img className={s.img} src={props.img}/>\n    <div>{props.name}</div>\n</div>\n)}\n\nexport default SidebarData","import React from \"react\";\nimport s from \"./Sidebar.module.css\";\nimport {SidebarPropsType} from \"./SidebarContainer\";\nimport SidebarData from \"./SidebarData/SidebarData\";\n\n\n\n\nexport const Sidebar = (props: SidebarPropsType) => {\n\n    let FriendsElement = props.sidebar.friends.map((p: {id: number, name: string, img: string}) => <SidebarData id={p.id} name={p.name} img={p.img} />)\n\n    return (\n        <div className={s.sidebar}>\n            {FriendsElement}\n        </div>\n    )\n}\n\nexport default Sidebar\n\n","import {AllAppStateType} from \"../../Redux/redux-store\";\n// import {Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\nimport Sidebar from \"./Sidebar\";\nimport {FriendType, SidebarType} from \"../../Redux/Store\";\n\nexport type SidebarPropsType = MapStatePropsType\n\ntype MapStatePropsType = {\n    sidebar: SidebarType\n}\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        sidebar: state.sidebar\n    }\n}\nconst SidebarContainer = connect(mapStateToProps)(Sidebar)\n\nexport default SidebarContainer;\n\n// type MapDispathPropsType = {\n//     addMassage: () => void\n//     updateNewMassageBody: (body: string) => void\n// }\n\n// const mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType=> {\n//     return {\n//         addMassage: () => {\n//             dispatch(addMassageActionCreator())\n//         },\n//         updateNewMassageBody: (body: string) => {\n//             dispatch(updateNewMassageBodyActionCreator(body))\n//         }\n//     }\n// }","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Nav.module.css';\nimport SidebarContainer from \"../Sidebar/SidebarContainer\";\n\nconst Nav = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to='/Profil' activeClassName={s.active}>Profile</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Dialogs' activeClassName={s.active}>Messeges</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/News' activeClassName={s.active}>News</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Music' activeClassName={s.active}>Music</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Settings' activeClassName={s.active}>Settings</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Users' activeClassName={s.active}>Users</NavLink>\n            </div>\n            <div>\n                <NavLink to='/Friends' activeClassName={s.active}><h3>FRIENDS</h3></NavLink>\n                <SidebarContainer/>\n            </div>\n        </nav>\n    )\n}\n\nexport default Nav","import React from 'react';\nimport s from './ProfilInfo.module.css';\n\nconst ProfilInfo = () => {\n    return (\n        <div>\n            <div>\n                <img id={s.upimage} src='https://www.forestryservices.ie/wp-content/uploads/2019/05/color-conifer-daylight-1179229.jpg' />\n            </div>\n            <div className = {s.descriptionBlock}>\n            <div>\n                <img src='https://cdn.pixabay.com/photo/2019/09/04/01/24/tree-4450514__340.jpg' />\n            </div>\n                ava+description\n                </div>\n        </div>\n    )\n};\n\nexport default ProfilInfo;","\nconst ADD_POST = 'ADD-POST'\nconst UPDATE_NEW_POST = 'UPDATE-NEW-POST'\n\nexport type PostType = {\n    message: string\n    id: number\n    likecount: string\n}\n\nexport type InitialStatePostType = {\n    posts: Array<PostType>\n    newPostText: string\n\n}\nlet initialState: InitialStatePostType = {\n    posts: [\n        {message: 'Hi, how are you?', id: 1, likecount: \"15\"},\n        {message: \"It's my first post\", id: 2, likecount: \"16\"},\n        {message: \"blablabla\", id: 3, likecount: \"11\"}\n    ],\n    newPostText: 'it-kamasutra'\n\n}\n\nconst profilReducer = (state: InitialStatePostType = initialState, action: ActionsType): InitialStatePostType => {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                newPostText: '',\n                posts: [...state.posts, {id: 4, message: state.newPostText, likecount: '0'}]\n            }\n        case UPDATE_NEW_POST:\n            return {\n                ...state,\n                newPostText: action.text\n            }\n        default:\n            return state\n    }\n}\n\nexport const addPostActionCreator = () => ({type: ADD_POST} as const)\nexport const updateNewPostTextActionCreator = (text: string) =>\n    ({type: UPDATE_NEW_POST, text} as const)\ntype ActionsType =\n    | ReturnType<typeof addPostActionCreator>\n    | ReturnType<typeof updateNewPostTextActionCreator>\n\nexport default profilReducer","import React from 'react';\nimport s from './Post.module.css';\n\ntype PropsType = {\n    message: string\n    likecount: string\n}\n\n\nconst Post = (props: PropsType) => {\n    return (\n\n        <div className={s.itemm}>\n            <img  src='https://topmsg.ru/wp-content/uploads/voin-v-chernom-kostyume.jpg' />\n             { props.message }\n            <div>\n                <span> like </span> {props.likecount}\n            </div>\n        </div>\n\n    )\n};\n\nexport default Post;","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {ProfilPropsType} from \"./MyPostsContainer\";\n\n// export type PostType = {\n//     message: string\n//     id: number\n//     likecount: string\n// }\n// type PropsType = {\n//     posts: Array<PostType>\n//     newPostText: string\n//     updateNewPostText: (text: string) => void\n//     addPost: () => void\n// }\nconst MyPosts = (props: ProfilPropsType) => {\n    let PostsElements = props.profilPage.posts.map(p => <Post message={p.message} likecount={p.likecount}/>)\n    let onAddPost = () => {\n        props.addPost()                                                                                                  //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n    }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let text = e.currentTarget.value\n        props.updateNewPostText(text)                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n    }\n    return (\n        <div className={s.mypost}>\n            <h3>My posts</h3>\n            <div>\n                <textarea onChange={onPostChange} value={props.profilPage.newPostText}/>\n            </div>\n            <div>\n                <button onClick={onAddPost}>Add post</button>\n            </div>\n            {PostsElements}\n        </div>\n    )\n};\n\nexport default MyPosts;","import React from 'react';\n\nimport {\n    addPostActionCreator,\n    InitialStatePostType,\n    updateNewPostTextActionCreator\n} from \"../../../Redux/profilReducer\";\nimport {Dispatch} from \"redux\";\nimport {AllAppStateType} from \"../../../Redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport Dialogs from \"../../Dialogs/Dialogs\";\nimport MyPosts from \"./MyPosts\";\n\n\n// type PropsType = {\n//     store: Store\n// }\n//\n//\n// const MyPostsContainer = (props: PropsType) => {\n//     let state = props.store.getState()\n//\n//     let addPost = () => {\n//         props.store.dispatch(addPostActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n//     }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n//     let onPostChange = (text: string) => {\n//         let action = updateNewPostTextActionCreator(text)\n//         props.store.dispatch(action)                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n//     }\n//\n//     return (\n//        <MyPosts updateNewPostText={onPostChange}\n//                 addPost={addPost}\n//                 posts={state.profilPage.posts}\n//                 newPostText={state.profilPage.newPostText} />\n//     )\n// };\n\nexport type ProfilPropsType = MapStatePropsType & MapDispathPropsType\n\ntype MapStatePropsType = {\n    profilPage: InitialStatePostType\n\n}\n\ntype MapDispathPropsType = {\n    addPost: () => void\n    updateNewPostText: (text: string) => void\n}\n\n\nlet mapStateToProps = (state: AllAppStateType ): MapStatePropsType => {\n    return {\n        profilPage: state.profilPage\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType=> {\n    return {\n        addPost: () => {\n            dispatch(addPostActionCreator())\n        },\n        updateNewPostText: (text: string) => {\n            dispatch(updateNewPostTextActionCreator(text))\n        }\n    }\n}\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n\n\nexport default MyPostsContainer;","import React from 'react';\nimport s from './Profil.module.css';\nimport ProfilInfo from './ProfilInfo/ProfilInfo';\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {Store} from \"redux\";\n\ntype PropsType = {\n    store: Store\n}\nconst Profil = () => {\n    return (\n        <div className={s.content}>\n            <ProfilInfo/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profil;","import React from 'react';\nimport s from './News.module.css';\n\n\nconst News = () => {\n    return (\n<div>\nNews\n</div>\n\n    )\n};\n\nexport default News;","import React from 'react';\nimport s from './Music.module.css';\n\n\nconst Music = () => {\n    return (\n<div>\nMusic\n</div>\n\n    )\n};\n\nexport default Music;","import React from 'react';\nimport s from './Settings.module.css';\n\n\nconst Settings = () => {\n    return (\n<div>\nSettings\n</div>\n\n    )\n};\n\nexport default Settings;","import {DialogType, MessegeType} from \"./redux-store\";\n\n\nconst UPDATE_NEW_MASSAGE_BODY = 'UPDATE-NEW-MASSAGE-BODY'\nconst ADD_MASSAGE = 'ADD-MASSAGE'\n\nexport type InitialStateType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessegeType>\n    newMassageBody: string\n}\n\nlet initialState: InitialStateType = {\n    dialogs: [\n        {\n            name: 'Dima',\n            id: 1,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Andrey',\n            id: 2,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Alex',\n            id: 3,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Sveta',\n            id: 4,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Vova',\n            id: 5,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Dora',\n            id: 6,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n        {\n            name: 'Oleg',\n            id: 7,\n            img: 'https://image.freepik.com/free-photo/boy-holds-red-flowers-before-his-eyes_1304-4515.jpg'\n        },\n    ],\n    messages: [\n        {message: 'hi', id: 1},\n        {message: 'good morning', id: 2},\n        {message: 'hello', id: 3},\n        {message: 'yo', id: 4},\n        {message: 'How is going', id: 5},\n        {message: 'Good bay', id: 6},\n        {message: 'good night', id: 7}\n    ],\n    newMassageBody: 'write here'\n}\n\nconst dialogReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case UPDATE_NEW_MASSAGE_BODY:\n            return {\n                ...state,\n                newMassageBody: action.body\n            }\n        case ADD_MASSAGE:\n            return {\n                ...state,\n                newMassageBody: '',\n                messages: [...state.messages, {message: state.newMassageBody, id: 8}]\n            }\n        default:\n            return state\n    }\n}\n\nexport const addMassageActionCreator = () => ({type: ADD_MASSAGE} as const)\nexport const updateNewMassageBodyActionCreator = (text: string) =>\n    ({type: UPDATE_NEW_MASSAGE_BODY, body: text} as const)\ntype ActionsType =\n    | ReturnType<typeof addMassageActionCreator>\n    | ReturnType<typeof updateNewMassageBodyActionCreator>\n\n\nexport default dialogReducer","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\nexport type PropsType = {\n    id: number\n    name: string\n    img: string\n}\n\nconst DialogItem = (props: PropsType) => {\n    return (\n        <div className={s.dialog }>\n            <img src={props.img} />\n            <NavLink to={'/dialogs/' + props.id}> {props.name} </NavLink>\n        </div>\n    )\n};\n\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css';\n\n\nconst Message = (props: { message: string }) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n};\n\n\nexport default Message;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport {DialogsPropsType} from \"./DialogsContainer\";\n\n\nconst Dialogs = (props: DialogsPropsType) => {\n\n    let DialogElements = props.dialogPage.dialogs.map((d: {\n        img: string; name: string; id: number;\n    }) => <DialogItem name={d.name} id={d.id} img={d.img}/>)\n    let MessegesElements = props.dialogPage.messages.map((m: { message: string }) => <Message message={m.message}/>)\n    let onMassageClick = () => {\n        props.addMassage()                                                                                                   //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n    }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n    let onMasssgeChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let body = e.currentTarget.value\n        props.updateNewMassageBody(body)\n\n        //функция которая сидит в state и обновляет данные при написании текста textarea\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogItems}>\n                {DialogElements}\n            </div>\n            <div className={s.messages}>\n                {MessegesElements}\n            </div>\n            <div>\n                <textarea onChange={onMasssgeChange} value={props.dialogPage.newMassageBody}/>\n                <button onClick={onMassageClick}>send</button>\n            </div>\n        </div>\n    )\n\n};\n\nexport default Dialogs;","import React from 'react';\nimport {\n    addMassageActionCreator,\n    InitialStateType,\n    updateNewMassageBodyActionCreator\n} from '../../Redux/dialogReducer';\nimport Dialogs from \"./Dialogs\";\nimport {Dispatch} from \"redux\";\nimport {AllAppStateType} from \"../../Redux/redux-store\";\nimport {connect} from 'react-redux';\n\n\n// const DialogsContainer = (props: PropsType) => {\n//\n//     let addMassage = () => {\n//         props.store.dispatch(addMassageActionCreator())                                                                                                    //функция которая сидит в state (addPost) и добавляет пост после нажатия на кнопку и перерисовывает\n//     }                                                                                                                        // props.updateNewPost('')      функция обновляет данные в state и перерисовывает пустую строку (перенесли это действие в state\n//     let onMasssgeChange = (body: string) => {\n//         props.store.dispatch(updateNewMassageBodyActionCreator(body))                                                                                    //функция которая сидит в state и обновляет данные при написании текста textarea\n//     }\n//     return (\n//         <Dialogs dialogs={props.store.getState().dialogPage.dialogs}\n//                  messages={props.store.getState().dialogPage.messages}\n//                  updateNewMassageBody={onMasssgeChange}\n//                  addMassage={addMassage}\n//                  newMassageBody={props.store.getState().dialogPage.newMassageBody}/>\n//     )\n// };\n\nexport type DialogsPropsType = MapStatePropsType & MapDispathPropsType\n\ntype MapStatePropsType = {\n    dialogPage: InitialStateType\n}\ntype MapDispathPropsType = {\n    addMassage: () => void\n    updateNewMassageBody: (body: string) => void\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        dialogPage: state.dialogPage\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType => {\n    return {\n        addMassage: () => {\n            dispatch(addMassageActionCreator())\n        },\n        updateNewMassageBody: (body: string) => {\n            dispatch(updateNewMassageBodyActionCreator(body))\n        }\n    }\n}\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\n\nexport default DialogsContainer;","import React from 'react';\nimport s from './Friends.module.css';\n\n\nconst Friends = () => {\n    return (\n        <div>\n            Friends\n        </div>\n\n    )\n};\n\nexport default Friends;","import React from 'react';\nimport {UsersPropsType} from \"./UsersContainer\";\nimport s from './Users.module.css';\n\n\n\n\nconst Users = (props: UsersPropsType) => {\n    if (props.users.length === 0) {\n        props.setUsers(props.users)\n    }\n    return (\n        <div>\n            {props.users.map(u =>\n                <div key={u.id}>\n                <span>\n                    <div>\n                        < img src={u.photoUrl} className={s.img}/>\n                    </div>\n                    <div>\n                        {u.followed\n                            ? <button onClick={() => {props.follow(u.id)}}>Follow</button>\n                            : <button onClick={() => {props.unfollow(u.id)}}>Unfollow</button>\n                        }\n                    </div>\n                </span>\n                    <span>\n                    <span>\n                        <div>{u.fullName}</div>\n                        <div>{u.status}</div>\n                    </span>\n                    <span>\n                        <div>{u.location.country}</div>\n                        <div>{u.location.city}</div>\n                    </span>\n                </span>\n                </div>\n            )}\n        </div>\n    )\n};\n\nexport default Users\n","\n\nconst FOLLOW = 'FOLLOW'\nconst UNFOLLOW = 'UNFOLLOW'\nconst SET_USERS = 'SET-USERS'\n\nexport type UsersType = {\n    id: number\n    followed: boolean\n    fullName: string\n    status: string\n    location: {city: string,\n        country: string}\n    photoUrl: string\n}\n\nexport type InitialStateUsersType = {\n    users: Array<UsersType>\n}\nlet initialState: InitialStateUsersType = {users:[\n        {id: 1, followed: true,  fullName: 'Dima', status: 'i am a Boss', location: {city: 'Minsk', country: 'Belorus'},photoUrl: 'https://i.pinimg.com/originals/bd/bf/d0/bdbfd0d90f12604b1538e2049f1c981c.jpg'},\n        {id: 2, followed: false,  fullName: 'Petr', status: 'hello', location: {city: 'Kiev', country: 'Ukraina'},photoUrl: 'https://i.pinimg.com/originals/bd/bf/d0/bdbfd0d90f12604b1538e2049f1c981c.jpg'},\n        {id: 3, followed: true,  fullName: 'Valik', status: 'i am a Boss', location: {city: 'Kiev', country: 'Ukraina'},photoUrl: 'https://i.pinimg.com/originals/bd/bf/d0/bdbfd0d90f12604b1538e2049f1c981c.jpg'},\n        {id: 4, followed: false,  fullName: 'Ira', status: 'let speak', location: {city: 'Moscow', country: 'Russia'},photoUrl: 'https://i.pinimg.com/originals/bd/bf/d0/bdbfd0d90f12604b1538e2049f1c981c.jpg'},\n        {id: 5, followed: true,  fullName: 'Dasha', status: 'i am a clever', location: {city: 'Moskow', country: 'Russia'},photoUrl: 'https://i.pinimg.com/originals/bd/bf/d0/bdbfd0d90f12604b1538e2049f1c981c.jpg'},\n    ]\n}\n\n\nconst usersReducer = (state: InitialStateUsersType = initialState, action: ActionsType): InitialStateUsersType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userID) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userID) {\n                        return {...u, followed: true}\n                    } return u\n                })\n            }\n        case SET_USERS:\n            return {...state, users: [ ...state.users, ...action.newUsers]}\n        default:\n            return state\n    }\n}\n\nexport const followAC = (userID: number) => ({type: FOLLOW, userID } as const)\nexport const unFollowAC = (userID: number) => ({type: UNFOLLOW, userID} as const)\nexport const setUsersAC = (newUsers: Array<UsersType>) => ({type: SET_USERS, newUsers} as const)\ntype ActionsType =\n    | ReturnType<typeof followAC>\n    | ReturnType<typeof unFollowAC>\n    | ReturnType<typeof setUsersAC>\n\nexport default usersReducer","import React from 'react';\nimport Users from \"./Users\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {AllAppStateType} from \"../../Redux/redux-store\";\nimport {followAC, unFollowAC, setUsersAC, UsersType} from \"../../Redux/usersReducer\";\n\nexport type UsersPropsType = MapStatePropsType & MapDispathPropsType\n\ntype MapStatePropsType = {\n    users: Array<UsersType>\n}\ntype MapDispathPropsType = {\n    follow: (userID: number) => void\n    unfollow: (userID: number) => void\n    setUsers: (newUsers: Array<UsersType>) => void\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        users: state.usersPage.users\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispathPropsType => {\n    return {\n        follow: (userID) => {\n            dispatch(followAC(userID))\n        },\n        unfollow: (userID) => {\n            dispatch(unFollowAC(userID))\n        },\n        setUsers: (newUsers) => {\n            dispatch(setUsersAC(newUsers))\n        }\n    }\n\n}\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(Users)\n\nexport default UsersContainer;","import React from 'react';\nimport './App.css';\nimport {Route} from 'react-router-dom';\nimport Header from './components/Header/Header';\nimport Nav from './components/Nav/Nav';\nimport Profil from './components/Profil/Profil';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport Friends from \"./components/Sidebar/Friends\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\n\n\n\nconst App: React.FC = () => {\n    return (\n        <div className='app-wrapper'>\n            <Header/>\n            <Nav/>\n            <div className='app-wrapper-content'>\n                <Route path='/profil' render={() => <Profil />}/>\n                <Route path='/dialogs' render={() => <DialogsContainer />}/>\n                <Route path='/news' render={() => <News/>}/>\n                <Route path='/music' render={() => <Music/>}/>\n                <Route path='/settings' render={() => <Settings/>}/>\n                <Route path='/users' render={() => <UsersContainer/>}/>\n                <Route path='/friends' render={() => <Friends/>}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nexport type FriendType = {\n    name: string\n    id: number\n    img: string\n}\nexport type SidebarType = {\n    friends: Array<FriendType>\n}\n\nlet initialState: SidebarType = {\n        friends: [\n            {name: 'Dima', id: 1, img: 'https://image.freepik.com/free-vector/cute-blue-wolf-avatar_79416-81.jpg'},\n            {name: 'Dora', id: 2, img: 'https://image.freepik.com/free-vector/cute-blue-wolf-avatar_79416-81.jpg'},\n            {name: 'Oleg', id: 3, img: 'https://image.freepik.com/free-vector/cute-blue-wolf-avatar_79416-81.jpg'},\n        ]\n}\n\nconst sidebarReducer = (state = initialState, action: any) => {\n\n    return state\n}\n\nexport default sidebarReducer","\nimport dialogReducer from \"./dialogReducer\";\nimport sidebarReducer from \"./sidebarReducer\";\nimport profilReducer from \"./profilReducer\";\nimport {combineReducers, createStore, Store} from \"redux\";\nimport usersReducer from \"./usersReducer\";\n\nexport type DialogType = {\n    name: string\n    id: number\n    img: string\n}\nexport type MessegeType = {\n    message: string\n    id: number\n}\n\n\nexport const rootReducer = combineReducers({\n    dialogPage: dialogReducer,\n    profilPage: profilReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer\n})\nlet store: Store = createStore(rootReducer)\nexport type AllAppStateType = ReturnType<typeof rootReducer>\nexport  default store\n\n\n// export type StateType = {\n//     profilPage: ProfilPageType\n//     dialogPage: DialogPageType\n//     sidebar: SidebarType\n// }\n// export type StoreType = {\n//     _state: StateType\n//     getState: () => StateType\n//     _callSubscriber: () => void\n//     subscribe: (observed: (state: StateType) => void) => void\n//     dispatch: (action: ActionsTypes) => void\n//     // updateNewPost: (postText: string) => void\n//     // addPost: (newPost: PostType) => void\n// }\n\n\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\n import store, {AllAppStateType} from \"./Redux/redux-store\";\nimport {Provider} from \"react-redux\";\n// import store, {StateType} from \"./Redux/Store\";\n\n\n  let rerenderEntireTree = (state: AllAppStateType) => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <BrowserRouter>\n                <Provider store={store} >\n                <App />\n                {/*//bind(store) говорит о том что если в обьекте есть this то он всегда относится к store. часто функции */}\n                {/*// callback может вызватся в другом месте где будет методом другого обьекта(к примеру props.addPost())*/}\n                </Provider>\n            </ BrowserRouter>,\n        </React.StrictMode>, document.getElementById('root'));\n}\nrerenderEntireTree(store.getState())\nstore.subscribe(() => {\n    let state = store.getState();\n    rerenderEntireTree(state)\n})\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}